import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram import types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import json
import os
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ—Ç—Ä–∏–º–∞–π—Ç–µ –≤—ñ–¥ @BotFather)
BOT_TOKEN = "8458486366:AAH4DnunseoCOdyyRS7fueLKeW4ELSZc3QA"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°—Ç–∞–Ω–∏ –¥–ª—è FSM
class UserProfile(StatesGroup):
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_height = State()
    waiting_for_weight = State()
    waiting_for_activity = State()
    waiting_for_goal = State()

class FoodCalories(StatesGroup):
    waiting_for_food = State()
    waiting_for_weight_food = State()

class WeightTracker(StatesGroup):
    waiting_for_weight = State()

class FoodDiary(StatesGroup):
    waiting_for_food_diary = State()
    waiting_for_food_weight_diary = State()

class DishConstructor(StatesGroup):
    waiting_for_dish_name = State()
    waiting_for_ingredients = State()
    waiting_for_ingredient_weight = State()

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ë–î)
users_db = {}

# –ü–æ—Å—Ç—ñ–π–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"), KeyboardButton(text="üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
        [KeyboardButton(text="üçé –ö–∞–ª–æ—Ä—ñ—ó"), KeyboardButton(text="üíß –í–æ–¥–∞")],
        [KeyboardButton(text="‚öñÔ∏è –Ü–ú–¢"), KeyboardButton(text="üí° –ü–æ—Ä–∞–¥–∏")],
        [KeyboardButton(text="üìà –í–∞–≥–∞"), KeyboardButton(text="üìÖ –©–æ–¥–µ–Ω–Ω–∏–∫")]
    ],
    resize_keyboard=True,
    persistent=True,
    placeholder="–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é..."
)

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ (–∫–∞–ª–æ—Ä—ñ—ó –Ω–∞ 100–≥)
food_db = {
    # üçé –§—Ä—É–∫—Ç–∏ —Ç–∞ —è–≥–æ–¥–∏
    "—è–±–ª—É–∫–æ": 52,
    "–±–∞–Ω–∞–Ω": 89,
    "–∞–ø–µ–ª—å—Å–∏–Ω": 47,
    "–º–∞–Ω–¥–∞—Ä–∏–Ω": 53,
    "–ª–∏–º–æ–Ω": 29,
    "–≥—Ä–µ–π–ø—Ñ—Ä—É—Ç": 35,
    "–≥—Ä—É—à–∞": 57,
    "–ø–µ—Ä—Å–∏–∫": 39,
    "–∞–±—Ä–∏–∫–æ—Å": 48,
    "—Å–ª–∏–≤–∞": 46,
    "–≤–∏—à–Ω—è": 52,
    "—á–µ—Ä–µ—à–Ω—è": 63,
    "–≤–∏–Ω–æ–≥—Ä–∞–¥": 65,
    "–ø–æ–ª—É–Ω–∏—Ü—è": 32,
    "–º–∞–ª–∏–Ω–∞": 46,
    "—á–æ—Ä–Ω–∏—Ü—è": 57,
    "—Å–º–æ—Ä–æ–¥–∏–Ω–∞": 44,
    "–∫—ñ–≤—ñ": 61,
    "–∞–Ω–∞–Ω–∞—Å": 50,
    "–º–∞–Ω–≥–æ": 60,
    
    # ü•ï –û–≤–æ—á—ñ
    "–ø–æ–º—ñ–¥–æ—Ä": 18,
    "–æ–≥—ñ—Ä–æ–∫": 16,
    "–º–æ—Ä–∫–≤–∞": 41,
    "—Ü–∏–±—É–ª—è": 40,
    "–∫–∞—Ä—Ç–æ–ø–ª—è": 77,
    "–∫–∞–ø—É—Å—Ç–∞": 25,
    "–±—É—Ä—è–∫": 43,
    "–∫–∞–±–∞—á–æ–∫": 24,
    "–±–∞–∫–ª–∞–∂–∞–Ω": 24,
    "–ø–µ—Ä–µ—Ü—å": 27,
    "–ø–µ—Ä–µ—Ü—å –±–æ–ª–≥–∞—Ä—Å—å–∫–∏–π": 27,
    "–ø–µ—Ä–µ—Ü—å –≥–æ—Å—Ç—Ä–∏–π": 40,
    "—Å–∞–ª–∞—Ç": 14,
    "—à–ø–∏–Ω–∞—Ç": 23,
    "–±—Ä–æ–∫–æ–ª—ñ": 34,
    "—Ü–≤—ñ—Ç–Ω–∞ –∫–∞–ø—É—Å—Ç–∞": 25,
    "–∫—É–∫—É—Ä—É–¥–∑–∞": 96,
    "–≥–æ—Ä–æ—à–æ–∫": 81,
    "–∫–≤–∞—Å–æ–ª—è": 93,
    "—Ä–µ–¥–∏—Å–∫–∞": 19,
    "—Ä–µ–¥—å–∫–∞": 36,
    "—á–∞—Å–Ω–∏–∫": 149,
    "—ñ–º–±–∏—Ä": 80,
    
    # üåæ –ö—Ä—É–ø–∏ —Ç–∞ –∫–∞—à—ñ
    "—Ä–∏—Å": 130,
    "–≥—Ä–µ—á–∫–∞": 343,
    "–≤—ñ–≤—Å—è–Ω–∫–∞": 389,
    "–ø—à–æ–Ω–æ": 348,
    "–ø–µ—Ä–ª–æ–≤–∫–∞": 320,
    "–º–∞–Ω–∫–∞": 328,
    "–∫—É–∫—É—Ä—É–¥–∑—è–Ω–∞ –∫–∞—à–∞": 337,
    "—è—á–º—ñ–Ω—å": 288,
    "–∫–∏–Ω–æ–∞": 368,
    
    # üçû –•–ª—ñ–±–æ–±—É–ª–æ—á–Ω—ñ –≤–∏—Ä–æ–±–∏
    "—Ö–ª—ñ–±": 265,
    "—Ö–ª—ñ–± —á–æ—Ä–Ω–∏–π": 214,
    "—Ö–ª—ñ–± –±—ñ–ª–∏–π": 265,
    "–±–∞—Ç–æ–Ω": 260,
    "–ª–∞–≤–∞—à": 236,
    "—Ç–æ—Å—Ç–∏": 290,
    "—Å—É—Ö–∞—Ä–∏–∫–∏": 331,
    "–ø–µ—á–∏–≤–æ": 417,
    "–ø—Ä—è–Ω–∏–∫–∏": 364,
    
    # üçù –ú–∞–∫–∞—Ä–æ–Ω–Ω—ñ –≤–∏—Ä–æ–±–∏
    "–º–∞–∫–∞—Ä–æ–Ω–∏": 371,
    "—Å–ø–∞–≥–µ—Ç—ñ": 371,
    "–ª–∞–ø—à–∞": 322,
    "–≤–µ—Ä–º—ñ—à–µ–ª—å": 371,
    
    # ü•õ –ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
    "–º–æ–ª–æ–∫–æ": 60,
    "–∫–µ—Ñ—ñ—Ä": 56,
    "—Ä—è–∂–∞–Ω–∫–∞": 85,
    "—Å–º–µ—Ç–∞–Ω–∞": 206,
    "–π–æ–≥—É—Ä—Ç": 59,
    "—Ç–≤–æ—Ä–æ–≥": 101,
    "—Å–∏—Ä": 402,
    "—Å–∏—Ä —Ä–æ—Å—ñ–π—Å—å–∫–∏–π": 364,
    "—Å–∏—Ä –≥–æ–ª–ª–∞–Ω–¥—Å—å–∫–∏–π": 377,
    "—Å–∏—Ä –∫–æ–∑—è—á–∏–π": 364,
    "–º–∞—Å–ª–æ –≤–µ—Ä—à–∫–æ–≤–µ": 717,
    "–≤–µ—Ä—à–∫–∏": 118,
    
    # ü•ö –Ø–π—Ü—è
    "—è–π—Ü–µ": 155,
    "—è–π—Ü–µ –∫—É—Ä–µ—á–µ": 155,
    "—è–π—Ü–µ –ø–µ—Ä–µ–ø–µ–ª–∏–Ω–µ": 168,
    "—è—î—á–Ω–∏–π –±—ñ–ª–æ–∫": 52,
    "—è—î—á–Ω–∏–π –∂–æ–≤—Ç–æ–∫": 322,
    
    # üçñ –ú'—è—Å–æ
    "—è–ª–æ–≤–∏—á–∏–Ω–∞": 187,
    "—Å–≤–∏–Ω–∏–Ω–∞": 259,
    "–±–∞—Ä–∞–Ω–∏–Ω–∞": 203,
    "—Ç–µ–ª—è—Ç–∏–Ω–∞": 97,
    "–∫—É—Ä–∏—Ü—è": 165,
    "—ñ–Ω–¥–∏—á–∫–∞": 104,
    "–∫–∞—á–∫–∞": 405,
    "–≥—É—Å–∞–∫": 412,
    "–∫—Ä–æ–ª–∏–∫": 156,
    "–ø–µ—á—ñ–Ω–∫–∞": 135,
    "—Å–µ—Ä—Ü–µ": 87,
    "–Ω–∏—Ä–∫–∏": 66,
    "–∫–æ–≤–±–∞—Å–∞": 301,
    "—Å–æ—Å–∏—Å–∫–∏": 266,
    "—à–∏–Ω–∫–∞": 270,
    "–±–µ–∫–æ–Ω": 541,
    
    # üêü –†–∏–±–∞ —Ç–∞ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏
    "—Ä–∏–±–∞": 206,
    "–ª–æ—Å–æ—Å—å": 208,
    "—Ç—É–Ω–µ—Ü—å": 296,
    "—Å–∫—É–º–±—Ä—ñ—è": 305,
    "—Å–µ–ª–µ–¥–∫–∞": 262,
    "—â—É–∫–∞": 84,
    "—Å—É–¥–∞–∫": 84,
    "–∫–æ—Ä–æ–ø": 112,
    "–º–∏–Ω—Ç–∞–π": 72,
    "—Ö–µ–∫": 86,
    "—Ç—Ä–µ—Å–∫–∞": 78,
    "–∫–∞–º–±–∞–ª–∞": 83,
    "–∫—Ä–µ–≤–µ—Ç–∫–∏": 95,
    "–∫—Ä–∞–±–∏": 96,
    "–∫–∞–ª—å–º–∞—Ä–∏": 110,
    "–º—ñ–¥—ñ—ó": 77,
    "—ñ–∫—Ä–∞": 263,
    
    # ü•ú –ì–æ—Ä—ñ—Ö–∏ —Ç–∞ –Ω–∞—Å—ñ–Ω–Ω—è
    "–≤–æ–ª–æ—Å—å–∫—ñ –≥–æ—Ä—ñ—Ö–∏": 654,
    "–º–∏–≥–¥–∞–ª—å": 575,
    "—Ñ—É–Ω–¥—É–∫": 628,
    "–∞—Ä–∞—Ö—ñ—Å": 567,
    "–∫–µ–¥—Ä–æ–≤—ñ –≥–æ—Ä—ñ—Ö–∏": 673,
    "–∫–µ—à—å—é": 553,
    "—Ñ—ñ—Å—Ç–∞—à–∫–∏": 556,
    "–Ω–∞—Å—ñ–Ω–Ω—è —Å–æ–Ω—è—à–Ω–∏–∫–∞": 578,
    "–Ω–∞—Å—ñ–Ω–Ω—è –≥–∞—Ä–±—É–∑–∞": 559,
    "–∫—É–Ω–∂—É—Ç": 565,
    
    # ü´ò –ë–æ–±–æ–≤—ñ
    "–≥–æ—Ä–æ—Ö": 298,
    "–∫–≤–∞—Å–æ–ª—è –±—ñ–ª–∞": 102,
    "–∫–≤–∞—Å–æ–ª—è —á–µ—Ä–≤–æ–Ω–∞": 93,
    "—Å–æ—á–µ–≤–∏—Ü—è": 295,
    "–Ω—É—Ç": 364,
    "—Å–æ—è": 381,
    
    # üçØ –°–æ–ª–æ–¥–æ—â—ñ —Ç–∞ —Ü—É–∫–æ—Ä
    "—Ü—É–∫–æ—Ä": 387,
    "–º–µ–¥": 329,
    "–≤–∞—Ä–µ–Ω–Ω—è": 263,
    "–¥–∂–µ–º": 263,
    "—à–æ–∫–æ–ª–∞–¥": 546,
    "—à–æ–∫–æ–ª–∞–¥ –º–æ–ª–æ—á–Ω–∏–π": 534,
    "—à–æ–∫–æ–ª–∞–¥ —á–æ—Ä–Ω–∏–π": 539,
    "—Ü—É–∫–µ—Ä–∫–∏": 453,
    "–º–∞—Ä–º–µ–ª–∞–¥": 321,
    "–∑–µ—Ñ—ñ—Ä": 326,
    "—Ö–∞–ª–≤–∞": 516,
    
    # üßÇ –û–ª—ñ—ó —Ç–∞ –∂–∏—Ä–∏
    "–æ–ª—ñ—è —Å–æ–Ω—è—à–Ω–∏–∫–æ–≤–∞": 899,
    "–æ–ª—ñ—è –æ–ª–∏–≤–∫–æ–≤–∞": 884,
    "–æ–ª—ñ—è –∫—É–∫—É—Ä—É–¥–∑—è–Ω–∞": 899,
    "–º–∞—Ä–≥–∞—Ä–∏–Ω": 719,
    "—Å–∞–ª–æ": 797,
    
    # ü•§ –ù–∞–ø–æ—ó –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ñ
    "—á–∞–π": 0,
    "–∫–∞–≤–∞": 2,
    "—Å—ñ–∫ —è–±–ª—É—á–Ω–∏–π": 46,
    "—Å—ñ–∫ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤–∏–π": 36,
    "—Å—ñ–∫ —Ç–æ–º–∞—Ç–Ω–∏–π": 21,
    "–∫–æ–º–ø–æ—Ç": 85,
    "–º–æ—Ä—Å": 41,
    "–∫–≤–∞—Å": 27,
    "–ª–∏–º–æ–Ω–∞–¥": 26,
    "–∫–æ–ª–∞": 42,
    "–ø–µ–ø—Å—ñ": 41,
    "—Å–ø—Ä–∞–π—Ç": 37,
    "—Ñ–∞–Ω—Ç–∞": 38,
    "–µ–Ω–µ—Ä–≥–µ—Ç–∏–∫": 45,
    "–≤–æ–¥–∞": 0,
    "–º—ñ–Ω–µ—Ä–∞–ª—å–Ω–∞ –≤–æ–¥–∞": 0,
    
    # üç∫ –ê–ª–∫–æ–≥–æ–ª—å–Ω—ñ –Ω–∞–ø–æ—ó
    "–ø–∏–≤–æ —Å–≤—ñ—Ç–ª–µ": 43,
    "–ø–∏–≤–æ —Ç–µ–º–Ω–µ": 48,
    "–ø–∏–≤–æ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω–µ": 26,
    "–≤–∏–Ω–æ —á–µ—Ä–≤–æ–Ω–µ": 68,
    "–≤–∏–Ω–æ –±—ñ–ª–µ": 66,
    "—à–∞–º–ø–∞–Ω—Å—å–∫–µ": 88,
    "–≥–æ—Ä—ñ–ª–∫–∞": 235,
    "–∫–æ–Ω—å—è–∫": 239,
    "–≤—ñ—Å–∫—ñ": 250,
    "—Ä–æ–º": 220,
    "–¥–∂–∏–Ω": 263,
    "—Ç–µ–∫—ñ–ª–∞": 231,
    "–∞–±—Å–µ–Ω—Ç": 83,
    "–ª—ñ–∫–µ—Ä": 327,
    "–º–∞—Ä—Ç—ñ–Ω—ñ": 140,
    "—Å–∞–º–æ–≥–æ–Ω": 235,
    "–Ω–∞–ª–∏–≤–∫–∞": 196,
    "–≥–ª—ñ–Ω—Ç–≤–µ–π–Ω": 132,
    "–ø—É–Ω—à": 260,
    "–∫–æ–∫—Ç–µ–π–ª—å –∞–ª–∫–æ–≥–æ–ª—å–Ω–∏–π": 150,
    
    # üåø –ó–µ–ª–µ–Ω—å —Ç–∞ —Å–ø–µ—Ü—ñ—ó
    "–ø–µ—Ç—Ä—É—à–∫–∞": 36,
    "–∫—Ä—ñ–ø": 38,
    "–∑–µ–ª–µ–Ω–∞ —Ü–∏–±—É–ª—è": 19,
    "–±–∞–∑–∏–ª—ñ–∫": 27,
    "–º'—è—Ç–∞": 70,
    "—Ä–æ–∑–º–∞—Ä–∏–Ω": 331,
    "–æ—Ä–µ–≥–∞–Ω–æ": 306,
    "—Ç–∏–º'—è–Ω": 276,
    
    # üçÑ –ì—Ä–∏–±–∏
    "–≥—Ä–∏–±–∏ –±—ñ–ª—ñ": 22,
    "—à–∞–º–ø—ñ–Ω—å–π–æ–Ω–∏": 27,
    "–ª–∏—Å–∏—á–∫–∏": 38,
    "–ø—ñ–¥–±–µ—Ä–µ–∑–Ω–∏–∫–∏": 31,
    "–æ–ø–µ–Ω—å–∫–∏": 17,
    "–ø–µ—á–µ—Ä–∏—Ü—ñ": 27,
    
    # üçø –°–Ω–µ–∫–∏ —Ç–∞ –∑–∞–∫—É—Å–∫–∏
    "—á—ñ–ø—Å–∏ –∫–∞—Ä—Ç–æ–ø–ª—è–Ω—ñ": 536,
    "—á—ñ–ø—Å–∏ –∫—É–∫—É—Ä—É–¥–∑—è–Ω—ñ": 498,
    "–ø–æ–ø–∫–æ—Ä–Ω": 387,
    "–ø–æ–ø–∫–æ—Ä–Ω —Å–æ–ª–æ–¥–∫–∏–π": 401,
    "–ø–æ–ø–∫–æ—Ä–Ω —Å–æ–ª–æ–Ω–∏–π": 375,
    "–∫—Ä–µ–∫–µ—Ä–∏": 440,
    "—Å—É—Ö–∞—Ä–∏–∫–∏": 331,
    "–±—Ä–µ—Ü–µ–ª—ñ": 380,
    "–∫—ñ–ª—å—Ü—è –ª—É–∫–æ–≤–æ": 410,
    "—Å–Ω–µ–∫–∏ —Å–∏—Ä–Ω—ñ": 520,
    "–≥–æ—Ä—ñ—à–∫–∏ —Å–æ–ª–æ–Ω—ñ": 607,
    "–≥–æ—Ä—ñ—à–∫–∏ –≤ –≥–ª–∞–∑—É—Ä—ñ": 580,
    "–Ω–∞—Å—ñ–Ω–Ω—è —Å–º–∞–∂–µ–Ω–µ": 601,
    "—Å—É—à–µ–Ω–∞ —Ä–∏–±–∞": 462,
    "—Å—É—à–µ–Ω–µ –º'—è—Å–æ": 550,
    "–∫–æ–≤–±–∞—Å–∞ —Å—É—à–µ–Ω–∞": 473,
    "–ø—ñ—Ü—Ü–∞": 266,
    "–±—É—Ä–≥–µ—Ä": 295,
    "—Ö–æ—Ç-–¥–æ–≥": 290,
    "—Å–µ–Ω–¥–≤—ñ—á": 304,
    "—à–∞—É—Ä–º–∞": 215,
    "–Ω–∞—á–æ—Å": 346,
    "—Ç–∞–∫–æ": 226,
    "–∫–∞—Ä—Ç–æ–ø–ª—è —Ñ—Ä—ñ": 365,
    "–ø–æ–Ω—á–∏–∫–∏": 452,
    "–≤–∞—Ñ–ª—ñ": 305,
    "—Ç—ñ—Å—Ç–µ—á–∫–∞": 544,
    "–∫–µ–∫—Å–∏": 389,
    "–º–∞—Ñ—Ñ—ñ–Ω–∏": 377,
    "–∫—Ä—É–∞—Å–∞–Ω–∏": 406,
    "–±–∞–≥–µ—Ç": 278,
    "–ø—ñ—Ç–∞": 275,
    
    # üßÄ –ó–∞–∫—É—Å–æ—á–Ω—ñ —Å–∏—Ä–∏ —Ç–∞ –¥–µ–ª—ñ–∫–∞—Ç–µ—Å–∏
    "—Å–∏—Ä –ø–ª–∞–≤–ª–µ–Ω–∏–π": 226,
    "—Å–∏—Ä –∑ –ø–ª—ñ—Å–Ω—è–≤–æ—é": 353,
    "–º–æ—Ü–∞—Ä–µ–ª–∞": 280,
    "–ø–∞—Ä–º–µ–∑–∞–Ω": 431,
    "—Ñ–µ—Ç–∞": 264,
    "–∫–∞–º–∞–º–±–µ—Ä": 299,
    "—á–µ–¥–¥–µ—Ä": 403,
    "–º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ": 429,
    "—Ä–æ–∫—Ñ–æ—Ä": 369,
    "–∫—Ä–µ–º-—Å–∏—Ä": 342,
    "—Å–∞–ª—è–º—ñ": 407,
    "–ø—Ä–æ—à—É—Ç—Ç–æ": 335,
    "–ø–µ–ø–µ—Ä–æ–Ω—ñ": 494,
    "—Ö–∞–º–æ–Ω": 241,
    "–æ–ª–∏–≤–∫–∏": 166,
    "–º–∞—Å–ª–∏–Ω–∏": 361,
    "–∫–∞–ø–µ—Ä—Å–∏": 23,
    "–∫–æ—Ä–Ω—ñ—à–æ–Ω–∏": 11,
    "–æ—Å–µ–ª–µ–¥–µ—Ü—å": 262,
    "—ñ–∫—Ä–∞ —á–µ—Ä–≤–æ–Ω–∞": 263,
    "—ñ–∫—Ä–∞ —á–æ—Ä–Ω–∞": 264,
    "–ø–∞—à—Ç–µ—Ç": 301,
    "—Ç—É—à–æ–Ω–∫–∞": 338
}

def load_users():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
    global users_db
    if os.path.exists('users.json'):
        with open('users.json', 'r', encoding='utf-8') as f:
            users_db = json.load(f)

def save_users():
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ñ–∞–π–ª"""
    with open('users.json', 'w', encoding='utf-8') as f:
        json.dump(users_db, f, ensure_ascii=False, indent=2)

def calculate_bmr(gender, age, height, weight):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª—ñ–∑–º—É –∑–∞ —Ñ–æ—Ä–º—É–ª–æ—é –•–∞—Ä—Ä—ñ—Å–∞-–ë–µ–Ω–µ–¥–∏–∫—Ç–∞"""
    if gender.lower() == '—á–æ–ª–æ–≤—ñ–∫':
        bmr = 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)
    else:
        bmr = 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)
    return round(bmr)

def calculate_daily_calories(bmr, activity_level):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–µ–Ω–Ω–æ—ó –Ω–æ—Ä–º–∏ –∫–∞–ª–æ—Ä—ñ–π"""
    activity_multipliers = {
        '–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞': 1.2,
        '–ª–µ–≥–∫–∞': 1.375,
        '–ø–æ–º—ñ—Ä–Ω–∞': 1.55,
        '–∞–∫—Ç–∏–≤–Ω–∞': 1.725,
        '–¥—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞': 1.9
    }
    return round(bmr * activity_multipliers.get(activity_level, 1.2))

def adjust_calories_for_goal(daily_calories, goal):
    """–ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–µ—Ç–∏"""
    if goal == '—Å—Ö—É–¥–Ω—É—Ç–∏':
        return daily_calories - 500
    elif goal == '–Ω–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É':
        return daily_calories + 500
    else:
        return daily_calories

def calculate_bmi(weight, height):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω–¥–µ–∫—Å—É –º–∞—Å–∏ —Ç—ñ–ª–∞ (–Ü–ú–¢)"""
    height_m = height / 100  # –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ —Å–º –≤ –º–µ—Ç—Ä–∏
    bmi = weight / (height_m ** 2)
    return round(bmi, 1)

def get_bmi_category(bmi):
    """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ü–ú–¢"""
    if bmi < 18.5:
        return "–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –≤–∞–≥–∞", "üîµ"
    elif 18.5 <= bmi < 25:
        return "–Ω–æ—Ä–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞", "üü¢"
    elif 25 <= bmi < 30:
        return "–Ω–∞–¥–ª–∏—à–∫–æ–≤–∞ –≤–∞–≥–∞", "üü°"
    else:
        return "–æ–∂–∏—Ä—ñ–Ω–Ω—è", "üî¥"

def calculate_water_intake(weight, activity_level):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ—Ä–º–∏ –≤–æ–¥–∏"""
    base_water = weight * 35  # 35 –º–ª –Ω–∞ –∫–≥ –≤–∞–≥–∏
    
    # –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    activity_multipliers = {
        '–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞': 1.0,
        '–ª–µ–≥–∫–∞': 1.1,
        '–ø–æ–º—ñ—Ä–Ω–∞': 1.2,
        '–∞–∫—Ç–∏–≤–Ω–∞': 1.3,
        '–¥—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞': 1.4
    }
    
    water_ml = base_water * activity_multipliers.get(activity_level, 1.0)
    return round(water_ml)

def add_weight_record(user_id, weight):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤–∞–≥–∏"""
    if user_id not in users_db:
        return False
    
    if 'weight_history' not in users_db[user_id]:
        users_db[user_id]['weight_history'] = []
    
    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
    weight_record = {
        'weight': weight,
        'date': datetime.now().isoformat(),
        'timestamp': datetime.now().timestamp()
    }
    
    users_db[user_id]['weight_history'].append(weight_record)
    users_db[user_id]['weight'] = weight  # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≤–∞–≥—É
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 100 –∑–∞–ø–∏—Å—ñ–≤
    if len(users_db[user_id]['weight_history']) > 100:
        users_db[user_id]['weight_history'] = users_db[user_id]['weight_history'][-100:]
    
    save_users()
    return True

def get_weight_progress(user_id):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≤–∞–≥–∏"""
    if user_id not in users_db or 'weight_history' not in users_db[user_id]:
        return None
    
    history = users_db[user_id]['weight_history']
    if len(history) < 2:
        return None
    
    # –û—Å—Ç–∞–Ω–Ω—ñ–π —ñ –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å
    current = history[-1]
    first = history[0]
    
    # –ü—Ä–æ–≥—Ä–µ—Å –∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥
    total_change = current['weight'] - first['weight']
    
    # –ü—Ä–æ–≥—Ä–µ—Å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
    week_ago = datetime.now().timestamp() - (7 * 24 * 60 * 60)
    recent_records = [r for r in history if r['timestamp'] > week_ago]
    
    week_change = 0
    if len(recent_records) >= 2:
        week_change = recent_records[-1]['weight'] - recent_records[0]['weight']
    
    return {
        'total_change': total_change,
        'week_change': week_change,
        'current_weight': current['weight'],
        'start_weight': first['weight'],
        'records_count': len(history)
    }

def add_food_diary_entry(user_id, food_name, weight, calories):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ —â–æ–¥–µ–Ω–Ω–∏–∫ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è"""
    if user_id not in users_db:
        return False
    
    if 'food_diary' not in users_db[user_id]:
        users_db[user_id]['food_diary'] = []
    
    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
    diary_entry = {
        'food_name': food_name,
        'weight': weight,
        'calories': calories,
        'date': datetime.now().strftime('%Y-%m-%d'),
        'time': datetime.now().strftime('%H:%M'),
        'timestamp': datetime.now().timestamp()
    }
    
    users_db[user_id]['food_diary'].append(diary_entry)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 1000 –∑–∞–ø–∏—Å—ñ–≤
    if len(users_db[user_id]['food_diary']) > 1000:
        users_db[user_id]['food_diary'] = users_db[user_id]['food_diary'][-1000:]
    
    save_users()
    return True

def get_daily_calories(user_id, date=None):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π –∑–∞ –¥–µ–Ω—å"""
    if user_id not in users_db or 'food_diary' not in users_db[user_id]:
        return 0
    
    if date is None:
        date = datetime.now().strftime('%Y-%m-%d')
    
    daily_entries = [entry for entry in users_db[user_id]['food_diary'] if entry['date'] == date]
    total_calories = sum(entry['calories'] for entry in daily_entries)
    
    return total_calories, daily_entries

@dp.message(CommandStart())
async def start_handler(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = str(message.from_user.id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
        [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—É", callback_data="calculate_food")],
        [InlineKeyboardButton(text="üìà –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="my_profile")],
        [InlineKeyboardButton(text="üíß –ù–æ—Ä–º–∞ –≤–æ–¥–∏", callback_data="water_intake")],
        [InlineKeyboardButton(text="‚öñÔ∏è –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ü–ú–¢", callback_data="calculate_bmi")],
        [InlineKeyboardButton(text="üí° –©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏", callback_data="daily_tips")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ])
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è–º
    photo_url = "https://images.unsplash.com/photo-1490645935967-10de6ba17061?w=800&h=600&fit=crop"
    
    await message.answer_photo(
        photo=photo_url,
        caption=f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! üëã\n\n"
                "–Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –¥—ñ—î—Ç–∏! ü•ó\n\n"
                "üìä –†–æ–∑—Ä–∞—Ö–æ–≤—É—é BMR —Ç–∞ –¥–µ–Ω–Ω—É –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä—ñ–π\n"
                "üçé –ó–Ω–∞—é –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å 250+ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤\n"
                "üí° –î–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó\n\n"
                "–©–æ —Ç–∏ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?",
        reply_markup=keyboard
    )
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Å—Ç—ñ–π–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await message.answer(
        "üéØ –®–≤–∏–¥–∫–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π:",
        reply_markup=main_keyboard
    )

@dp.callback_query(F.data == "create_profile")
async def create_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë® –ß–æ–ª–æ–≤—ñ–∫", callback_data="gender_male")],
        [InlineKeyboardButton(text="üë© –ñ—ñ–Ω–∫–∞", callback_data="gender_female")]
    ])
    
    await callback.message.edit_text(
        "–î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å! üìù\n\n"
        "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å:",
        reply_markup=keyboard
    )
    await state.set_state(UserProfile.waiting_for_gender)

@dp.callback_query(F.data.in_(["gender_male", "gender_female"]))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å—Ç–∞—Ç—ñ"""
    gender = "—á–æ–ª–æ–≤—ñ–∫" if callback.data == "gender_male" else "–∂—ñ–Ω–∫–∞"
    await state.update_data(gender=gender)
    
    await callback.message.edit_text(
        f"–°—Ç–∞—Ç—å: {gender} ‚úÖ\n\n"
        "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫ (–≤ —Ä–æ–∫–∞—Ö):"
    )
    await state.set_state(UserProfile.waiting_for_age)

@dp.message(UserProfile.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–∫—É"""
    try:
        age = int(message.text)
        if age < 10 or age > 120:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (10-120 —Ä–æ–∫—ñ–≤)")
            return
        
        await state.update_data(age=age)
        await message.answer(f"–í—ñ–∫: {age} —Ä–æ–∫—ñ–≤ ‚úÖ\n\n–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑—Ä—ñ—Å—Ç (–≤ —Å–º):")
        await state.set_state(UserProfile.waiting_for_height)
        
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ —á–∏—Å–ª–æ–º")

@dp.message(UserProfile.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∑—Ä–æ—Å—Ç—É"""
    try:
        height = int(message.text)
        if height < 100 or height > 250:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑—Ä—ñ—Å—Ç (100-250 —Å–º)")
            return
        
        await state.update_data(height=height)
        await message.answer(f"–ó—Ä—ñ—Å—Ç: {height} —Å–º ‚úÖ\n\n–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É (–≤ –∫–≥):")
        await state.set_state(UserProfile.waiting_for_weight)
        
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑—Ä—ñ—Å—Ç —á–∏—Å–ª–æ–º")

@dp.message(UserProfile.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∞–≥–∏"""
    try:
        weight = float(message.text)
        if weight < 30 or weight > 300:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –≤–∞–≥—É (30-300 –∫–≥)")
            return
        
        await state.update_data(weight=weight)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõãÔ∏è –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="activity_minimal")],
            [InlineKeyboardButton(text="üö∂ –õ–µ–≥–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="activity_light")],
            [InlineKeyboardButton(text="üèÉ –ü–æ–º—ñ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="activity_moderate")],
            [InlineKeyboardButton(text="üí™ –ê–∫—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è", callback_data="activity_active")],
            [InlineKeyboardButton(text="üèãÔ∏è –î—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π", callback_data="activity_very_active")]
        ])
        
        await message.answer(
            f"–í–∞–≥–∞: {weight} –∫–≥ ‚úÖ\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:",
            reply_markup=keyboard
        )
        await state.set_state(UserProfile.waiting_for_activity)
        
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É —á–∏—Å–ª–æ–º")

@dp.callback_query(F.data.startswith("activity_"))
async def process_activity(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ä—ñ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    activity_map = {
        "activity_minimal": "–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞",
        "activity_light": "–ª–µ–≥–∫–∞",
        "activity_moderate": "–ø–æ–º—ñ—Ä–Ω–∞",
        "activity_active": "–∞–∫—Ç–∏–≤–Ω–∞",
        "activity_very_active": "–¥—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞"
    }
    
    activity = activity_map[callback.data]
    await state.update_data(activity=activity)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨áÔ∏è –°—Ö—É–¥–Ω—É—Ç–∏", callback_data="goal_lose")],
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–∞–≥—É", callback_data="goal_maintain")],
        [InlineKeyboardButton(text="‚¨ÜÔ∏è –ù–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É", callback_data="goal_gain")]
    ])
    
    await callback.message.edit_text(
        f"–†—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {activity} ‚úÖ\n\n"
        "–Ø–∫–∞ –≤–∞—à–∞ –º–µ—Ç–∞?",
        reply_markup=keyboard
    )
    await state.set_state(UserProfile.waiting_for_goal)

@dp.callback_query(F.data.startswith("goal_"))
async def process_goal(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    goal_map = {
        "goal_lose": "—Å—Ö—É–¥–Ω—É—Ç–∏",
        "goal_maintain": "–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–∞–≥—É",
        "goal_gain": "–Ω–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É"
    }
    
    goal = goal_map[callback.data]
    await state.update_data(goal=goal)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
    data = await state.get_data()
    user_id = str(callback.from_user.id)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–∞–ª–æ—Ä—ñ—ó
    bmr = calculate_bmr(data['gender'], data['age'], data['height'], data['weight'])
    daily_calories = calculate_daily_calories(bmr, data['activity'])
    target_calories = adjust_calories_for_goal(daily_calories, goal)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    users_db[user_id] = {
        **data,
        'bmr': bmr,
        'daily_calories': daily_calories,
        'target_calories': target_calories,
        'created_at': datetime.now().isoformat()
    }
    save_users()
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = f"""
‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!

üë§ –í–∞—à—ñ –¥–∞–Ω—ñ:
‚Ä¢ –°—Ç–∞—Ç—å: {data['gender']}
‚Ä¢ –í—ñ–∫: {data['age']} —Ä–æ–∫—ñ–≤
‚Ä¢ –ó—Ä—ñ—Å—Ç: {data['height']} —Å–º
‚Ä¢ –í–∞–≥–∞: {data['weight']} –∫–≥
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {data['activity']}
‚Ä¢ –ú–µ—Ç–∞: {goal}

üìä –í–∞—à—ñ –∫–∞–ª–æ—Ä—ñ—ó:
‚Ä¢ –ë–∞–∑–æ–≤–∏–π –º–µ—Ç–∞–±–æ–ª—ñ–∑–º: {bmr} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –î–µ–Ω–Ω–∞ –Ω–æ—Ä–º–∞: {daily_calories} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è –º–µ—Ç–∏: {target_calories} –∫–∫–∞–ª/–¥–µ–Ω—å

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
‚Ä¢ –ü–∏–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤–æ–¥–∏ (30-35 –º–ª –Ω–∞ –∫–≥ –≤–∞–≥–∏)
‚Ä¢ –á–∂—Ç–µ 4-5 —Ä–∞–∑—ñ–≤ –Ω–∞ –¥–µ–Ω—å –Ω–µ–≤–µ–ª–∏–∫–∏–º–∏ –ø–æ—Ä—Ü—ñ—è–º–∏
‚Ä¢ –í–∫–ª—é—á–∞–π—Ç–µ –±—ñ–ª–∫–∏ –≤ –∫–æ–∂–µ–Ω –ø—Ä–∏–π–æ–º —ó–∂—ñ
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—É", callback_data="calculate_food")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(result_text, reply_markup=keyboard)
    await state.clear()

@dp.callback_query(F.data == "calculate_food")
async def calculate_food_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π –ø—Ä–æ–¥—É–∫—Ç—É"""
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    categories = {
        "üçé –§—Ä—É–∫—Ç–∏": ["—è–±–ª—É–∫–æ", "–±–∞–Ω–∞–Ω", "–∞–ø–µ–ª—å—Å–∏–Ω", "–≥—Ä—É—à–∞", "–≤–∏–Ω–æ–≥—Ä–∞–¥"],
        "ü•ï –û–≤–æ—á—ñ": ["–ø–æ–º—ñ–¥–æ—Ä", "–æ–≥—ñ—Ä–æ–∫", "–º–æ—Ä–∫–≤–∞", "–∫–∞–ø—É—Å—Ç–∞", "–∫–∞—Ä—Ç–æ–ø–ª—è"],
        "üçñ –ú'—è—Å–æ": ["–∫—É—Ä–∏—Ü—è", "—è–ª–æ–≤–∏—á–∏–Ω–∞", "—Å–≤–∏–Ω–∏–Ω–∞", "—ñ–Ω–¥–∏—á–∫–∞"],
        "üêü –†–∏–±–∞": ["–ª–æ—Å–æ—Å—å", "—Ç—É–Ω–µ—Ü—å", "—Å–∫—É–º–±—Ä—ñ—è", "—Ç—Ä–µ—Å–∫–∞"],
        "ü•õ –ú–æ–ª–æ—á–Ω—ñ": ["–º–æ–ª–æ–∫–æ", "—Å–∏—Ä", "–π–æ–≥—É—Ä—Ç", "—Ç–≤–æ—Ä–æ–≥", "–∫–µ—Ñ—ñ—Ä"],
        "üåæ –ö—Ä—É–ø–∏": ["—Ä–∏—Å", "–≥—Ä–µ—á–∫–∞", "–≤—ñ–≤—Å—è–Ω–∫–∞", "–∫–∏–Ω–æ–∞"],
        "üçø –°–Ω–µ–∫–∏": ["—á—ñ–ø—Å–∏ –∫–∞—Ä—Ç–æ–ø–ª—è–Ω—ñ", "–ø–æ–ø–∫–æ—Ä–Ω", "–∫—Ä–µ–∫–µ—Ä–∏", "–≥–æ—Ä—ñ—à–∫–∏ —Å–æ–ª–æ–Ω—ñ"],
        "üç∫ –ê–ª–∫–æ–≥–æ–ª—å": ["–ø–∏–≤–æ —Å–≤—ñ—Ç–ª–µ", "–≤–∏–Ω–æ —á–µ—Ä–≤–æ–Ω–µ", "–≥–æ—Ä—ñ–ª–∫–∞", "–∫–æ–Ω—å—è–∫"]
    }
    
    food_list = ""
    for category, foods in categories.items():
        food_list += f"\n{category}:\n"
        food_list += "\n".join([f"‚Ä¢ {food}" for food in foods])
        food_list += "\n"
    
    # –§–æ—Ç–æ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    food_photo = "https://images.unsplash.com/photo-1498837167922-ddd27525d352?w=800&h=600&fit=crop"
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –∑ —Ñ–æ—Ç–æ
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=food_photo,
        caption=f"üçé –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–∞–ª–æ—Ä—ñ–π –ø—Ä–æ–¥—É–∫—Ç—É\n\n"
                f"–£ –±–∞–∑—ñ —î {len(food_db)} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤! –û—Å—å –¥–µ—è–∫—ñ –∑ –Ω–∏—Ö:\n"
                f"{food_list}\n"
                f"...—Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–∏—Ö! ü•úüçØüçÑ\n\n"
                f"–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É:"
    )
    await state.set_state(FoodCalories.waiting_for_food)

@dp.message(FoodCalories.waiting_for_food)
async def process_food_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ –ø—Ä–æ–¥—É–∫—Ç—É"""
    food_name = message.text.lower().strip()
    
    # –ü—Ä—è–º–∏–π –ø–æ—à—É–∫
    if food_name in food_db:
        await state.update_data(food_name=food_name, calories_per_100g=food_db[food_name])
        await message.answer(
            f"–ü—Ä–æ–¥—É–∫—Ç: {food_name} ‚úÖ\n"
            f"–ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å: {food_db[food_name]} –∫–∫–∞–ª –Ω–∞ 100–≥\n\n"
            f"–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É –ø—Ä–æ–¥—É–∫—Ç—É –≤ –≥—Ä–∞–º–∞—Ö:"
        )
        await state.set_state(FoodCalories.waiting_for_weight_food)
        return
    
    # –†–æ–∑—É–º–Ω–∏–π –ø–æ—à—É–∫ - –∑–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ö–æ–∂—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
    similar_foods = []
    
    # –®—É–∫–∞—î–º–æ —Ç–æ—á–Ω—ñ –∑–±—ñ–≥–∏ –≤ —á–∞—Å—Ç–∏–Ω—ñ –Ω–∞–∑–≤–∏
    for food in food_db.keys():
        if food_name in food or food in food_name:
            similar_foods.append(food)
    
    # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, —à—É–∫–∞—î–º–æ –ø–æ —Å–ª–æ–≤–∞—Ö
    if not similar_foods:
        food_words = food_name.split()
        for food in food_db.keys():
            for word in food_words:
                if word in food and len(word) > 2:
                    similar_foods.append(food)
    
    # –°–∏–Ω–æ–Ω—ñ–º–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    synonyms = {
        "–∫—É—Ä–∫–∞": "–∫—É—Ä–∏—Ü—è",
        "–∫—É—Ä—è—Ç–∏–Ω–∞": "–∫—É—Ä–∏—Ü—è", 
        "–≥–æ–≤—è–¥–∏–Ω–∞": "—è–ª–æ–≤–∏—á–∏–Ω–∞",
        "—Ç–µ–ª—è—Ç–∏–Ω–∞": "—Ç–µ–ª—è—Ç–∏–Ω–∞",
        "—Å–≤–∏–Ω—è—á–µ": "—Å–≤–∏–Ω–∏–Ω–∞",
        "—Ä–∏–±–∫–∞": "—Ä–∏–±–∞",
        "–º–æ–ª–æ—á–∫–æ": "–º–æ–ª–æ–∫–æ",
        "—Å–∏—Ä–æ–∫": "—Å–∏—Ä",
        "—è—î—á–∫–æ": "—è–π—Ü–µ",
        "—è–±–ª—É—á–∫–æ": "—è–±–ª—É–∫–æ",
        "–∫–∞—Ä—Ç–æ—à–∫–∞": "–∫–∞—Ä—Ç–æ–ø–ª—è",
        "–ø–æ–º—ñ–¥–æ—Ä–∫–∞": "–ø–æ–º—ñ–¥–æ—Ä",
        "–æ–≥—ñ—Ä–æ—á–æ–∫": "–æ–≥—ñ—Ä–æ–∫",
        "–º–æ—Ä–∫–≤–∏–Ω–∫–∞": "–º–æ—Ä–∫–≤–∞",
        "–∫–∞–ø—É—Å—Ç–∫–∞": "–∫–∞–ø—É—Å—Ç–∞",
        "–≥—Ä–∏–±–æ—á–∫–∏": "–≥—Ä–∏–±–∏ –±—ñ–ª—ñ",
        "–ø–µ—á–µ—Ä–∏—Ü—ñ": "—à–∞–º–ø—ñ–Ω—å–π–æ–Ω–∏",
        # –ê–ª–∫–æ–≥–æ–ª—å–Ω—ñ —Å–∏–Ω–æ–Ω—ñ–º–∏
        "–ø–∏–≤–∫–æ": "–ø–∏–≤–æ —Å–≤—ñ—Ç–ª–µ",
        "–≤–∏–Ω—Ü–µ": "–≤–∏–Ω–æ —á–µ—Ä–≤–æ–Ω–µ",
        "–≤–∏–Ω–∏—à–∫–æ": "–≤–∏–Ω–æ —á–µ—Ä–≤–æ–Ω–µ",
        "—à–∞–º–ø–∞–Ω—Å—å–∫–µ": "—à–∞–º–ø–∞–Ω—Å—å–∫–µ",
        "–±—Ä–µ–Ω–¥—ñ": "–∫–æ–Ω—å—è–∫",
        "—Å–∞–º–æ–≥–æ–Ω–∫–∞": "—Å–∞–º–æ–≥–æ–Ω",
        # –°–Ω–µ–∫–∏ —Å–∏–Ω–æ–Ω—ñ–º–∏
        "—á—ñ–ø—Å—ñ": "—á—ñ–ø—Å–∏ –∫–∞—Ä—Ç–æ–ø–ª—è–Ω—ñ",
        "—á–∏–ø—Å–∏": "—á—ñ–ø—Å–∏ –∫–∞—Ä—Ç–æ–ø–ª—è–Ω—ñ",
        "–ø–æ–ø–∫–æ–Ω": "–ø–æ–ø–∫–æ—Ä–Ω",
        "—Å—É—Ö–∞—Ä—ñ": "—Å—É—Ö–∞—Ä–∏–∫–∏",
        "–ø—ñ—Ü–∞": "–ø—ñ—Ü—Ü–∞",
        "–∫–∞—Ä—Ç–æ–ø–ª—è-—Ñ—Ä—ñ": "–∫–∞—Ä—Ç–æ–ø–ª—è —Ñ—Ä—ñ",
        "—Ñ–∞—Å—Ç—Ñ—É–¥": "–±—É—Ä–≥–µ—Ä",
        "–º–∞–∫–¥–∞–∫": "–±—É—Ä–≥–µ—Ä",
        "—Ö–æ—Ç–¥–æ–≥": "—Ö–æ—Ç-–¥–æ–≥"
    }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∏–Ω–æ–Ω—ñ–º–∏
    if food_name in synonyms:
        synonym_product = synonyms[food_name]
        if synonym_product in food_db:
            await state.update_data(food_name=synonym_product, calories_per_100g=food_db[synonym_product])
            await message.answer(
                f"–ó–Ω–∞–π—à–æ–≤! üéØ\n"
                f"–ü—Ä–æ–¥—É–∫—Ç: {synonym_product} ‚úÖ\n"
                f"–ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å: {food_db[synonym_product]} –∫–∫–∞–ª –Ω–∞ 100–≥\n\n"
                f"–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É –ø—Ä–æ–¥—É–∫—Ç—É –≤ –≥—Ä–∞–º–∞—Ö:"
            )
            await state.set_state(FoodCalories.waiting_for_weight_food)
            return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ö–æ–∂—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
    if similar_foods:
        # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ç–∞ –æ–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        similar_foods = list(set(similar_foods))[:8]
        suggestions = "\n".join([f"‚Ä¢ {food} ({food_db[food]} –∫–∫–∞–ª)" for food in similar_foods])
        
        await message.answer(
            f"–ü—Ä–æ–¥—É–∫—Ç '{food_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî\n\n"
            f"üîç –ú–æ–∂–ª–∏–≤–æ, –≤–∏ –º–∞–ª–∏ –Ω–∞ —É–≤–∞–∑—ñ:\n{suggestions}\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Ç–æ—á–Ω—É –Ω–∞–∑–≤—É:"
        )
    else:
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
        popular_foods = ["—è–±–ª—É–∫–æ", "–±–∞–Ω–∞–Ω", "–∫—É—Ä–∏—Ü—è", "—Ä–∏—Å", "–º–æ–ª–æ–∫–æ", "—è–π—Ü–µ", "—Ö–ª—ñ–±", "–∫–∞—Ä—Ç–æ–ø–ª—è"]
        popular_list = "\n".join([f"‚Ä¢ {food} ({food_db[food]} –∫–∫–∞–ª)" for food in popular_foods])
        
        await message.answer(
            f"–ü—Ä–æ–¥—É–∫—Ç '{food_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî\n\n"
            f"üí° –ü–æ–ø—É–ª—è—Ä–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏:\n{popular_list}\n\n"
            f"–£ –±–∞–∑—ñ —î {len(food_db)} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤! –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /start"
        )

@dp.message(FoodCalories.waiting_for_weight_food)
async def process_food_weight(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∞–≥–∏ –ø—Ä–æ–¥—É–∫—Ç—É"""
    try:
        weight = float(message.text)
        if weight <= 0:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ")
            return
        
        data = await state.get_data()
        food_name = data['food_name']
        calories_per_100g = data['calories_per_100g']
        
        total_calories = round((calories_per_100g * weight) / 100, 1)
        
        result_text = f"""
üçé –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:

üì¶ –ü—Ä–æ–¥—É–∫—Ç: {food_name}
‚öñÔ∏è –í–∞–≥–∞: {weight}–≥
üî• –ö–∞–ª–æ—Ä—ñ—ó: {total_calories} –∫–∫–∞–ª

üìä –î–µ—Ç–∞–ª—ñ:
‚Ä¢ –ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å –Ω–∞ 100–≥: {calories_per_100g} –∫–∫–∞–ª
‚Ä¢ –í–∞—à–∞ –ø–æ—Ä—Ü—ñ—è: {weight}–≥
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å: {total_calories} –∫–∫–∞–ª
        """
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ % –≤—ñ–¥ –¥–µ–Ω–Ω–æ—ó –Ω–æ—Ä–º–∏, —è–∫—â–æ —î –ø—Ä–æ—Ñ—ñ–ª—å
        user_id = str(message.from_user.id)
        if user_id in users_db:
            target_calories = users_db[user_id]['target_calories']
            percentage = round((total_calories / target_calories) * 100, 1)
            result_text += f"\nüí° –¶–µ {percentage}% –≤—ñ–¥ –≤–∞—à–æ—ó –¥–µ–Ω–Ω–æ—ó –Ω–æ—Ä–º–∏ ({target_calories} –∫–∫–∞–ª)"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π –ø—Ä–æ–¥—É–∫—Ç", callback_data="calculate_food")],
            [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –ø—Ä–æ–¥—É–∫—Ç—É
        product_photos = {
            # –§—Ä—É–∫—Ç–∏
            "—è–±–ª—É–∫–æ": "https://images.unsplash.com/photo-1567306226416-28f0efdc88ce?w=400&h=400&fit=crop",
            "–±–∞–Ω–∞–Ω": "https://images.unsplash.com/photo-1571771894821-ce9b6c11b08e?w=400&h=400&fit=crop",
            # –ú'—è—Å–æ
            "–∫—É—Ä–∏—Ü—è": "https://images.unsplash.com/photo-1587593810167-148ebbc35e5e?w=400&h=400&fit=crop",
            "—è–ª–æ–≤–∏—á–∏–Ω–∞": "https://images.unsplash.com/photo-1558030137-b7a7b4b3d724?w=400&h=400&fit=crop",
            # –ú–æ–ª–æ—á–Ω—ñ
            "–º–æ–ª–æ–∫–æ": "https://images.unsplash.com/photo-1550583724-b2692b85b150?w=400&h=400&fit=crop",
            "—Å–∏—Ä": "https://images.unsplash.com/photo-1486297678162-eb2a19b0a32d?w=400&h=400&fit=crop",
            # –°–Ω–µ–∫–∏
            "–ø—ñ—Ü—Ü–∞": "https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=400&fit=crop",
            "–±—É—Ä–≥–µ—Ä": "https://images.unsplash.com/photo-1568901346375-23c9450c58cd?w=400&h=400&fit=crop",
            # –ê–ª–∫–æ–≥–æ–ª—å
            "–ø–∏–≤–æ —Å–≤—ñ—Ç–ª–µ": "https://images.unsplash.com/photo-1608270586620-248524c67de9?w=400&h=400&fit=crop",
            "–≤–∏–Ω–æ —á–µ—Ä–≤–æ–Ω–µ": "https://images.unsplash.com/photo-1547595628-c61a29f496f0?w=400&h=400&fit=crop"
        }
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –≤—Å—ñ—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
        default_photo = "https://images.unsplash.com/photo-1490645935967-10de6ba17061?w=400&h=400&fit=crop"
        
        # –í–∏–±–∏—Ä–∞—î–º–æ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É –∞–±–æ –∑–∞–≥–∞–ª—å–Ω–µ
        photo_url = product_photos.get(food_name, default_photo)
        
        await message.answer_photo(
            photo=photo_url,
            caption=result_text,
            reply_markup=keyboard
        )
        await state.clear()
        
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 150)")

@dp.callback_query(F.data == "my_profile")
async def show_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = str(callback.from_user.id)
    
    if user_id not in users_db:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")]
        ])
        await callback.message.edit_text(
            "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –ø—Ä–æ—Ñ—ñ–ª—é üòî\n\n"
            "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π!",
            reply_markup=keyboard
        )
        return
    
    user = users_db[user_id]
    profile_text = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:

üìã –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ:
‚Ä¢ –°—Ç–∞—Ç—å: {user['gender']}
‚Ä¢ –í—ñ–∫: {user['age']} —Ä–æ–∫—ñ–≤
‚Ä¢ –ó—Ä—ñ—Å—Ç: {user['height']} —Å–º
‚Ä¢ –í–∞–≥–∞: {user['weight']} –∫–≥
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user['activity']}
‚Ä¢ –ú–µ—Ç–∞: {user['goal']}

üìä –ö–∞–ª–æ—Ä—ñ—ó:
‚Ä¢ –ë–∞–∑–æ–≤–∏–π –º–µ—Ç–∞–±–æ–ª—ñ–∑–º: {user['bmr']} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –î–µ–Ω–Ω–∞ –Ω–æ—Ä–º–∞: {user['daily_calories']} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: {user['target_calories']} –∫–∫–∞–ª/–¥–µ–Ω—å

üí° –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏:
‚Ä¢ –ë—ñ–ª–∫–∏: {round(user['target_calories'] * 0.3 / 4)}–≥ –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –ñ–∏—Ä–∏: {round(user['target_calories'] * 0.25 / 9)}–≥ –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –í—É–≥–ª–µ–≤–æ–¥–∏: {round(user['target_calories'] * 0.45 / 4)}–≥ –Ω–∞ –¥–µ–Ω—å
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
        [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó", callback_data="calculate_food")],
        [InlineKeyboardButton(text="üíß –ù–æ—Ä–º–∞ –≤–æ–¥–∏", callback_data="water_intake"), InlineKeyboardButton(text="‚öñÔ∏è –Ü–ú–¢", callback_data="calculate_bmi")]
    ])
    
    # –í–∏–±–∏—Ä–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—Ä–æ—Ñ—ñ–ª—é –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞—Ç—ñ —Ç–∞ –º–µ—Ç–∏
    profile_image = "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&h=600&fit=crop"  # fitness profile
    if user['gender'] == '–∂—ñ–Ω–∫–∞':
        profile_image = "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&h=600&fit=crop"  # female fitness
    else:
        profile_image = "https://images.unsplash.com/photo-1581009146145-b5ef050c2e1e?w=800&h=600&fit=crop"  # male fitness
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=profile_image,
        caption=profile_text,
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–æ–≤—ñ–¥–∫–∏"""
    help_text = """
‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É

ü§ñ –©–æ —è –≤–º—ñ—é:
‚Ä¢ üìä –†–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –±–∞–∑–æ–≤–∏–π –º–µ—Ç–∞–±–æ–ª—ñ–∑–º (BMR)
‚Ä¢ üî• –í–∏–∑–Ω–∞—á–∞—Ç–∏ –¥–µ–Ω–Ω—É –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä—ñ–π
‚Ä¢ üçé –†–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å 250+ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
‚Ä¢ üíß –†–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –Ω–æ—Ä–º—É –≤–æ–¥–∏ —â–æ–¥–Ω—è
‚Ä¢ ‚öñÔ∏è –í–∏–∑–Ω–∞—á–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ (–Ü–ú–¢)
‚Ä¢ üí° –î–∞–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤'—è
‚Ä¢ üìà –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
‚Ä¢ üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–µ—Ç–∏

üìä –§–æ—Ä–º—É–ª–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:
‚Ä¢ BMR (—á–æ–ª–æ–≤—ñ–∫–∏): 88.362 + (13.397 √ó –≤–∞–≥–∞) + (4.799 √ó –∑—Ä—ñ—Å—Ç) - (5.677 √ó –≤—ñ–∫)
‚Ä¢ BMR (–∂—ñ–Ω–∫–∏): 447.593 + (9.247 √ó –≤–∞–≥–∞) + (3.098 √ó –∑—Ä—ñ—Å—Ç) - (4.330 √ó –≤—ñ–∫)
‚Ä¢ –Ü–ú–¢: –≤–∞–≥–∞(–∫–≥) / –∑—Ä—ñ—Å—Ç(–º)¬≤
‚Ä¢ –ù–æ—Ä–º–∞ –≤–æ–¥–∏: 35 –º–ª √ó –≤–∞–≥–∞ √ó –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ

üéØ –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –º–µ—Ç–∏:
‚Ä¢ –°—Ö—É–¥–Ω—É—Ç–∏: -500 –∫–∫–∞–ª –≤—ñ–¥ –Ω–æ—Ä–º–∏
‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏: –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä—ñ–π
‚Ä¢ –ù–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É: +500 –∫–∫–∞–ª –¥–æ –Ω–æ—Ä–º–∏

üì± –ö–æ–º–∞–Ω–¥–∏:
/start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é

üåü –í–µ—Ä—Å—ñ—è: 2.0 –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏
    help_image = "https://images.unsplash.com/photo-1551963831-b3b1ca40c98e?w=800&h=600&fit=crop"  # brain/knowledge
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=help_image,
        caption=help_text,
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
        [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—É", callback_data="calculate_food")],
        [InlineKeyboardButton(text="üìà –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="my_profile")],
        [InlineKeyboardButton(text="üíß –ù–æ—Ä–º–∞ –≤–æ–¥–∏", callback_data="water_intake")],
        [InlineKeyboardButton(text="‚öñÔ∏è –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ü–ú–¢", callback_data="calculate_bmi")],
        [InlineKeyboardButton(text="üí° –©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏", callback_data="daily_tips")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ])
    
    # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    menu_image = "https://images.unsplash.com/photo-1498837167922-ddd27525d352?w=800&h=600&fit=crop"  # healthy food spread
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=menu_image,
        caption=f"–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†\n\n"
        "–û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏:",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "water_intake")
async def water_intake(callback: CallbackQuery):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ—Ä–º–∏ –≤–æ–¥–∏"""
    user_id = str(callback.from_user.id)
    
    if user_id not in users_db:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
            [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.edit_text(
            "üíß –î–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ω–æ—Ä–º–∏ –≤–æ–¥–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø—Ä–æ—Ñ—ñ–ª—å!\n\n"
            "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π:",
            reply_markup=keyboard
        )
        return
    
    user = users_db[user_id]
    water_ml = calculate_water_intake(user['weight'], user['activity'])
    water_glasses = round(water_ml / 250)  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Å–∫–ª—è–Ω–∫–∞ 250–º–ª
    
    water_text = f"""
üíß –í–∞—à–∞ –Ω–æ—Ä–º–∞ –≤–æ–¥–∏:

üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:
‚Ä¢ –í–∞–≥–∞: {user['weight']} –∫–≥
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user['activity']}
‚Ä¢ –ë–∞–∑–æ–≤–∞ –Ω–æ—Ä–º–∞: 35 –º–ª/–∫–≥

üí¶ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
‚Ä¢ {water_ml} –º–ª –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –¶–µ –ø—Ä–∏–±–ª–∏–∑–Ω–æ {water_glasses} —Å–∫–ª—è–Ω–æ–∫ –ø–æ 250–º–ª
‚Ä¢ –ü–∏–π—Ç–µ —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ –ø—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è

üí° –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏:
‚Ä¢ –ü–æ—á–Ω—ñ—Ç—å –¥–µ–Ω—å –∑—ñ —Å–∫–ª—è–Ω–∫–∏ –≤–æ–¥–∏
‚Ä¢ –ü–∏–π—Ç–µ –≤–æ–¥—É –∑–∞ 30 —Ö–≤ –¥–æ —ó–∂—ñ
‚Ä¢ –ë—ñ–ª—å—à–µ –≤–æ–¥–∏ –ø—Ä–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è—Ö
‚Ä¢ –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –∫–æ–ª—å–æ—Ä–æ–º —Å–µ—á—ñ (–º–∞—î –±—É—Ç–∏ —Å–≤—ñ—Ç–ª–æ-–∂–æ–≤—Ç–æ—é)
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öñÔ∏è –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ü–ú–¢", callback_data="calculate_bmi")],
        [InlineKeyboardButton(text="üí° –©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏", callback_data="daily_tips")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    water_image = "https://images.unsplash.com/photo-1550583724-b2692b85b150?w=800&h=600&fit=crop"
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=water_image,
        caption=water_text,
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "calculate_bmi")
async def calculate_bmi_handler(callback: CallbackQuery):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ü–ú–¢"""
    user_id = str(callback.from_user.id)
    
    if user_id not in users_db:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
            [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.edit_text(
            "‚öñÔ∏è –î–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ü–ú–¢ –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø—Ä–æ—Ñ—ñ–ª—å!\n\n"
            "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π:",
            reply_markup=keyboard
        )
        return
    
    user = users_db[user_id]
    bmi = calculate_bmi(user['weight'], user['height'])
    category, emoji = get_bmi_category(bmi)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ü–ú–¢
    recommendations = {
        "–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –≤–∞–≥–∞": "–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –∑–±—ñ–ª—å—à–∏—Ç–∏ –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å —Ä–∞—Ü—ñ–æ–Ω—É —Ç–∞ –≤–∫–ª—é—á–∏—Ç–∏ —Å–∏–ª–æ–≤—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
        "–Ω–æ—Ä–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞": "–ß—É–¥–æ–≤–æ! –ü—ñ–¥—Ç—Ä–∏–º—É–π—Ç–µ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è",
        "–Ω–∞–¥–ª–∏—à–∫–æ–≤–∞ –≤–∞–≥–∞": "–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–æ–º—ñ—Ä–Ω–µ –∑–Ω–∏–∂–µ–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π–Ω–æ—Å—Ç—ñ —Ç–∞ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
        "–æ–∂–∏—Ä—ñ–Ω–Ω—è": "–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è —Ç–∞ —Å–∫–ª–∞—Å—Ç–∏ –ø–ª–∞–Ω –∑–Ω–∏–∂–µ–Ω–Ω—è –≤–∞–≥–∏"
    }
    
    bmi_text = f"""
‚öñÔ∏è –í–∞—à —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ (–Ü–ú–¢):

üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:
‚Ä¢ –ó—Ä—ñ—Å—Ç: {user['height']} —Å–º
‚Ä¢ –í–∞–≥–∞: {user['weight']} –∫–≥
‚Ä¢ –Ü–ú–¢: {bmi}

{emoji} –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
{recommendations[category]}

üìà –®–∫–∞–ª–∞ –Ü–ú–¢:
üîµ < 18.5 - –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –≤–∞–≥–∞
üü¢ 18.5-24.9 - –Ω–æ—Ä–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞
üü° 25.0-29.9 - –Ω–∞–¥–ª–∏—à–∫–æ–≤–∞ –≤–∞–≥–∞
üî¥ ‚â• 30.0 - –æ–∂–∏—Ä—ñ–Ω–Ω—è
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíß –ù–æ—Ä–º–∞ –≤–æ–¥–∏", callback_data="water_intake")],
        [InlineKeyboardButton(text="üí° –©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏", callback_data="daily_tips")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    bmi_image = "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&h=600&fit=crop"
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=bmi_image,
        caption=bmi_text,
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "daily_tips")
async def daily_tips(callback: CallbackQuery):
    """–©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏"""
    import random
    
    tips = [
        "ü•ó –á–∂—Ç–µ 5 –ø–æ—Ä—Ü—ñ–π –æ–≤–æ—á—ñ–≤ —Ç–∞ —Ñ—Ä—É–∫—Ç—ñ–≤ –Ω–∞ –¥–µ–Ω—å",
        "üö∂ –†–æ–±—ñ—Ç—å –º—ñ–Ω—ñ–º—É–º 10,000 –∫—Ä–æ–∫—ñ–≤ —â–æ–¥–Ω—è",
        "üí§ –°–ø—ñ—Ç—å 7-9 –≥–æ–¥–∏–Ω –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–º—É",
        "ü•õ –ü–∏–π—Ç–µ –≤–æ–¥—É –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è",
        "üçΩÔ∏è –á–∂—Ç–µ –ø–æ–≤—ñ–ª—å–Ω–æ —Ç–∞ —Ä–µ—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∂–æ–≤—É–π—Ç–µ",
        "üßò –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ü—ñ—é 10 —Ö–≤–∏–ª–∏–Ω —â–æ–¥–Ω—è",
        "üèÉ –î–æ–¥–∞–π—Ç–µ –∫–∞—Ä–¥—ñ–æ-—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è 3 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å",
        "üí™ –°–∏–ª–æ–≤—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è 2-3 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å",
        "ü•ú –í–∫–ª—é—á–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—ñ –∂–∏—Ä–∏: –≥–æ—Ä—ñ—Ö–∏, –∞–≤–æ–∫–∞–¥–æ, –æ–ª—ñ—ó",
        "üêü –á–∂—Ç–µ —Ä–∏–±—É 2-3 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å",
        "üö´ –£–Ω–∏–∫–∞–π—Ç–µ —Ü—É–∫—Ä—É —Ç–∞ –æ–±—Ä–æ–±–ª–µ–Ω–æ—ó —ó–∂—ñ",
        "üì± –ó—Ä–æ–±—ñ—Ç—å –ø–µ—Ä–µ—Ä–≤—É –≤—ñ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø—ñ–¥ —á–∞—Å —ó–∂—ñ",
        "üåÖ –û—Ç—Ä–∏–º—É–π—Ç–µ —Ä–∞–Ω–∫–æ–≤–µ —Å–æ–Ω—è—á–Ω–µ —Å–≤—ñ—Ç–ª–æ",
        "üçÉ –î–æ–¥–∞–≤–∞–π—Ç–µ –∑–µ–ª–µ–Ω—å —É –∫–æ–∂–µ–Ω –ø—Ä–∏–π–æ–º —ó–∂—ñ",
        "‚è∞ –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —Ä–µ–∂–∏–º—É —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è",
        "üßä –ü'–∏—Ç–µ —Ö–æ–ª–æ–¥–Ω—É –≤–æ–¥—É –¥–ª—è –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –º–µ—Ç–∞–±–æ–ª—ñ–∑–º—É",
        "ü•µ –î–æ–¥–∞–≤–∞–π—Ç–µ –≥–æ—Å—Ç—Ä—ñ —Å–ø–µ—Ü—ñ—ó –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ç–µ—Ä–º–æ–≥–µ–Ω–µ–∑—É",
        "üõë –ù–µ —ó–∂—Ç–µ –∑–∞ 3 –≥–æ–¥–∏–Ω–∏ –¥–æ —Å–Ω—É",
        "üìä –í–µ–¥—ñ—Ç—å —â–æ–¥–µ–Ω–Ω–∏–∫ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è",
        "üéØ –°—Ç–∞–≤—Ç–µ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Ü—ñ–ª—ñ —â–æ—Ç–∏–∂–Ω—è"
    ]
    
    # –í–∏–±–∏—Ä–∞—î–º–æ 5 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø–æ—Ä–∞–¥
    daily_tips_list = random.sample(tips, 5)
    tips_text = "\n".join([f"{i+1}. {tip}" for i, tip in enumerate(daily_tips_list)])
    
    user_id = str(callback.from_user.id)
    personalized_tip = ""
    
    if user_id in users_db:
        user = users_db[user_id]
        if user['goal'] == '—Å—Ö—É–¥–Ω—É—Ç–∏':
            personalized_tip = "\nüí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø–æ—Ä–∞–¥–∞: –°—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ—Ñ—ñ—Ü–∏—Ç –∫–∞–ª–æ—Ä—ñ–π 300-500 –∫–∫–∞–ª/–¥–µ–Ω—å –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å—Ö—É–¥–Ω–µ–Ω–Ω—è."
        elif user['goal'] == '–Ω–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É':
            personalized_tip = "\nüí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø–æ—Ä–∞–¥–∞: –ó–±—ñ–ª—å—à—Ç–µ –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å –Ω–∞ 300-500 –∫–∫–∞–ª/–¥–µ–Ω—å —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Å–∏–ª–æ–≤—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."
        else:
            personalized_tip = "\nüí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø–æ—Ä–∞–¥–∞: –ü—ñ–¥—Ç—Ä–∏–º—É–π—Ç–µ –±–∞–ª–∞–Ω—Å –∫–∞–ª–æ—Ä—ñ–π —Ç–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å."
    
    tips_full_text = f"""
üí° –©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤'—è:

{tips_text}
{personalized_tip}

üåü –ü–∞–º'—è—Ç–∞–π—Ç–µ: –º–∞–ª–µ–Ω—å–∫—ñ –∫—Ä–æ–∫–∏ –≤–µ–¥—É—Ç—å –¥–æ –≤–µ–ª–∏–∫–∏—Ö –∑–º—ñ–Ω!
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ñ –ø–æ—Ä–∞–¥–∏", callback_data="daily_tips")],
        [InlineKeyboardButton(text="üíß –ù–æ—Ä–º–∞ –≤–æ–¥–∏", callback_data="water_intake")],
        [InlineKeyboardButton(text="‚öñÔ∏è –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ü–ú–¢", callback_data="calculate_bmi")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    tips_image = "https://images.unsplash.com/photo-1506629905107-bb5842dcbc67?w=800&h=600&fit=crop"
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=tips_image,
        caption=tips_full_text,
        reply_markup=keyboard
    )

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–∞—é—Ç—å –±—É—Ç–∏ –ü–ï–†–ï–î –æ–±—Ä–æ–±–Ω–∏–∫–∞–º–∏ FSM
@dp.message(F.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def main_menu_button(message: Message, state: FSMContext = None):
    await main_menu(message)

@dp.message(F.text == "üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")
async def profile_button(message: Message):
    await show_profile(message)

@dp.message(F.text == "üçé –ö–∞–ª–æ—Ä—ñ—ó")
async def calories_button(message: Message, state: FSMContext):
    await message.answer("üçé –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–∞–ª–æ—Ä—ñ–π:")
    await state.set_state(FoodCalories.waiting_for_product)

@dp.message(F.text == "üíß –í–æ–¥–∞")
async def water_button(message: Message):
    await show_water_recommendations(message)

@dp.message(F.text == "‚öñÔ∏è –Ü–ú–¢")
async def bmi_button(message: Message):
    await show_bmi_info(message)

@dp.message(F.text == "üí° –ü–æ—Ä–∞–¥–∏")
async def tips_button(message: Message):
    await show_daily_tips(message)

@dp.message(F.text == "üìà –í–∞–≥–∞")
async def weight_button(message: Message):
    await show_weight_tracker_menu(message)

@dp.message(F.text == "üìÖ –©–æ–¥–µ–Ω–Ω–∏–∫")
async def diary_button(message: Message):
    await show_food_diary_menu(message)

# ...existing code...
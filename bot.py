from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram import types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime
import asyncio
import logging
import json
import os
import random

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ—Ç—Ä–∏–º–∞–π—Ç–µ –≤—ñ–¥ @BotFather)
BOT_TOKEN = "8458486366:AAH4DnunseoCOdyyRS7fueLKeW4ELSZc3QA"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°—Ç–∞–Ω–∏ –¥–ª—è FSM
class UserProfile(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_gender = State()
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_activity = State()
    waiting_for_goal = State()

class FoodCalories(StatesGroup):
    waiting_for_food = State()
    waiting_for_weight = State()

class WeightTracker(StatesGroup):
    waiting_for_weight = State()

class FoodDiary(StatesGroup):
    waiting_for_food = State()
    waiting_for_weight = State()

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
users_db = {}
USER_DATA_FILE = "users.json"

# –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ (–∫–∞–ª–æ—Ä—ñ—ó –Ω–∞ 100–≥)
FOOD_DATABASE = {
    # –§—Ä—É–∫—Ç–∏ —Ç–∞ —è–≥–æ–¥–∏
    "—è–±–ª—É–∫–æ": 52, "–±–∞–Ω–∞–Ω": 89, "–∞–ø–µ–ª—å—Å–∏–Ω": 47, "–≥—Ä—É—à–∞": 57, "–≤–∏–Ω–æ–≥—Ä–∞–¥": 62,
    "–ø–æ–ª—É–Ω–∏—Ü—è": 32, "–º–∞–ª–∏–Ω–∞": 52, "–∫—ñ–≤—ñ": 61, "–∞–Ω–∞–Ω–∞—Å": 50, "–º–∞–Ω–≥–æ": 60,
    "–ø–µ—Ä—Å–∏–∫": 39, "–∞–±—Ä–∏–∫–æ—Å": 48, "—Å–ª–∏–≤–∞": 46, "–≤–∏—à–Ω—è": 50, "—á–µ—Ä–µ—à–Ω—è": 63,
    "–ª–∏–º–æ–Ω": 16, "–≥—Ä–µ–π–ø—Ñ—Ä—É—Ç": 35, "–∞—Ä–±—É–∑": 30, "–¥–∏–Ω—è": 34, "–≥—Ä–∞–Ω–∞—Ç": 83,
    
    # –û–≤–æ—á—ñ
    "–ø–æ–º—ñ–¥–æ—Ä": 18, "–æ–≥—ñ—Ä–æ–∫": 16, "–º–æ—Ä–∫–≤–∞": 35, "–∫–∞–ø—É—Å—Ç–∞": 25, "–∫–∞—Ä—Ç–æ–ø–ª—è": 77,
    "–±—É—Ä—è–∫": 43, "—Ü–∏–±—É–ª—è": 40, "—á–∞—Å–Ω–∏–∫": 149, "–ø–µ—Ä–µ—Ü—å –±–æ–ª–≥–∞—Ä—Å—å–∫–∏–π": 27, "–±–∞–∫–ª–∞–∂–∞–Ω": 24,
    "–∫–∞–±–∞—á–æ–∫": 23, "–≥–∞—Ä–±—É–∑": 26, "–±—Ä–æ–∫–æ–ª—ñ": 34, "—Ü–≤—ñ—Ç–Ω–∞ –∫–∞–ø—É—Å—Ç–∞": 30, "—à–ø–∏–Ω–∞—Ç": 23,
    "—Å–∞–ª–∞—Ç": 15, "—Ä–µ–¥–∏—Å": 16, "—Å–µ–ª–µ—Ä–∞": 14, "–ø–µ—Ç—Ä—É—à–∫–∞": 36, "–∫—Ä—ñ–ø": 38,
    "—Ä–µ–¥—å–∫–∞": 34, "—Ç–æ–ø—ñ–Ω–∞–º–±—É—Ä": 61, "—Å–ø–∞—Ä–∂–∞": 20,
    
    # –ú'—è—Å–æ —Ç–∞ –ø—Ç–∏—Ü—è
    "–∫—É—Ä–∏—Ü—è": 165, "—è–ª–æ–≤–∏—á–∏–Ω–∞": 187, "—Å–≤–∏–Ω–∏–Ω–∞": 242, "—ñ–Ω–¥–∏—á–∫–∞": 144, "–∫–∞—á–∫–∞": 337,
    "—Ç–µ–ª—è—Ç–∏–Ω–∞": 172, "–±–∞—Ä–∞–Ω–∏–Ω–∞": 203, "–∫—Ä–æ–ª–∏–∫": 156, "–ø–µ—á—ñ–Ω–∫–∞ –∫—É—Ä—è—á–∞": 140, "–ø–µ—á—ñ–Ω–∫–∞ —è–ª–æ–≤–∏—á–∞": 127,
    "—Å–µ—Ä—Ü–µ": 112, "–Ω–∏—Ä–∫–∏": 86, "—è–∑–∏–∫ —è–ª–æ–≤–∏—á–∏–π": 173, "–∫–æ–≤–±–∞—Å–∞": 257, "—Å–æ—Å–∏—Å–∫–∏": 266,
    "–±–µ–∫–æ–Ω": 541,
    
    # –†–∏–±–∞ —Ç–∞ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏
    "–ª–æ—Å–æ—Å—å": 208, "—Ç—É–Ω–µ—Ü—å": 144, "—Å–∫—É–º–±—Ä—ñ—è": 191, "—Å–µ–ª–µ–¥–∫–∞": 246, "—Ç—Ä–µ—Å–∫–∞": 78,
    "—Å—É–¥–∞–∫": 84, "–∫–æ—Ä–æ–ø": 112, "—â—É–∫–∞": 84, "–æ–∫—É–Ω—å": 103, "–º–∏–Ω—Ç–∞–π": 72,
    "–∫—Ä–µ–≤–µ—Ç–∫–∏": 106, "–∫—Ä–∞–±–∏": 96, "–º—ñ–¥—ñ—ó": 77, "–∫–∞–ª—å–º–∞—Ä–∏": 110, "—ñ–∫—Ä–∞ —á–µ—Ä–≤–æ–Ω–∞": 263,
    "—ñ–∫—Ä–∞ —á–æ—Ä–Ω–∞": 264, "–ª–æ–±—Å—Ç–µ—Ä": 89,
    
    # –ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
    "–º–æ–ª–æ–∫–æ": 60, "–∫–µ—Ñ—ñ—Ä": 56, "—Ä—è–∂–∞–Ω–∫–∞": 85, "—Å–º–µ—Ç–∞–Ω–∞": 206, "—Ç–≤–æ—Ä–æ–≥": 103,
    "—Å–∏—Ä —Ç–≤–µ—Ä–¥–∏–π": 364, "—Å–∏—Ä –º'—è–∫–∏–π": 173, "–π–æ–≥—É—Ä—Ç": 66, "–º–∞—Å–ª–æ –≤–µ—Ä—à–∫–æ–≤–µ": 748,
    "–∑–≥—É—â–µ–Ω–µ –º–æ–ª–æ–∫–æ": 320, "–≤–µ—Ä—à–∫–∏": 118,
    
    # –ö—Ä—É–ø–∏ —Ç–∞ –∫–∞—à—ñ
    "—Ä–∏—Å": 130, "–≥—Ä–µ—á–∫–∞": 132, "–≤—ñ–≤—Å—è–Ω–∫–∞": 68, "–º–∞–Ω–∫–∞": 98, "–ø–µ—Ä–ª–æ–≤–∫–∞": 109,
    "–ø—à–æ–Ω–æ": 119, "–∫–∏–Ω–æ–∞": 120, "–±—É–ª–≥—É—Ä": 83, "–∫—É—Å-–∫—É—Å": 112,
    
    # –ì–æ—Ä—ñ—Ö–∏ —Ç–∞ –Ω–∞—Å—ñ–Ω–Ω—è
    "–≤–æ–ª–æ—Å—å–∫—ñ –≥–æ—Ä—ñ—Ö–∏": 654, "–º–∏–≥–¥–∞–ª—å": 575, "—Ñ—É–Ω–¥—É–∫": 628, "–∞—Ä–∞—Ö—ñ—Å": 551, "–∫–µ—à—å—é": 553,
    "—Ñ—ñ—Å—Ç–∞—à–∫–∏": 556, "–∫–µ–¥—Ä–æ–≤—ñ –≥–æ—Ä—ñ—Ö–∏": 673, "–Ω–∞—Å—ñ–Ω–Ω—è —Å–æ–Ω—è—à–Ω–∏–∫–∞": 578, "–Ω–∞—Å—ñ–Ω–Ω—è –≥–∞—Ä–±—É–∑–∞": 559,
    "–ª—å–Ω—è–Ω–µ –Ω–∞—Å—ñ–Ω–Ω—è": 534,
    
    # –°–æ–ª–æ–¥–æ—â—ñ
    "—Ü—É–∫–æ—Ä": 387, "–º–µ–¥": 304, "—à–æ–∫–æ–ª–∞–¥ –º–æ–ª–æ—á–Ω–∏–π": 534, "—à–æ–∫–æ–ª–∞–¥ —á–æ—Ä–Ω–∏–π": 546, "–≤–∞—Ä–µ–Ω–Ω—è": 263,
    "–∑–µ—Ñ—ñ—Ä": 326, "–º–∞—Ä–º–µ–ª–∞–¥": 321, "—Ö–∞–ª–≤–∞": 516, "–ø–µ—á–∏–≤–æ": 417, "—Ç–æ—Ä—Ç–∏–∫": 400,
    "–º–æ—Ä–æ–∑–∏–≤–æ": 207,
    
    # –ù–∞–ø–æ—ó
    "—á–∞–π –∑–µ–ª–µ–Ω–∏–π": 0, "—á–∞–π —á–æ—Ä–Ω–∏–π": 0, "–∫–∞–≤–∞ –±–µ–∑ —Ü—É–∫—Ä—É": 2, "—Å—ñ–∫ —è–±–ª—É—á–Ω–∏–π": 46,
    "—Å—ñ–∫ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤–∏–π": 45, "—Å—ñ–∫ —Ç–æ–º–∞—Ç–Ω–∏–π": 17, "–∫–æ–º–ø–æ—Ç": 60, "–∫–≤–∞—Å": 27,
    "–∫–æ–ª–∞": 42, "–ø–µ–ø—Å—ñ": 41, "—Å–ø—Ä–∞–π—Ç": 37, "—Ñ–∞–Ω—Ç–∞": 38, "–µ–Ω–µ—Ä–≥–µ—Ç–∏–∫": 45,
    
    # –•–ª—ñ–± —Ç–∞ –≤–∏—Ä–æ–±–∏
    "—Ö–ª—ñ–± –±—ñ–ª–∏–π": 265, "—Ö–ª—ñ–± —á–æ—Ä–Ω–∏–π": 210, "—Ö–ª—ñ–± –∂–∏—Ç–Ω—ñ–π": 181, "–±–∞—Ç–æ–Ω": 260,
    "–±—É–ª–æ—á–∫–∞": 317, "–∫—Ä—É–∞—Å–∞–Ω": 406, "–ª–∞–≤–∞—à": 236,
    
    # –ê–ª–∫–æ–≥–æ–ª—å–Ω—ñ –Ω–∞–ø–æ—ó
    "–ø–∏–≤–æ —Å–≤—ñ—Ç–ª–µ": 43, "–ø–∏–≤–æ —Ç–µ–º–Ω–µ": 48, "–≤–∏–Ω–æ —á–µ—Ä–≤–æ–Ω–µ": 68, "–≤–∏–Ω–æ –±—ñ–ª–µ": 66,
    "—à–∞–º–ø–∞–Ω—Å—å–∫–µ": 88, "–≥–æ—Ä—ñ–ª–∫–∞": 235, "–∫–æ–Ω—å—è–∫": 239, "–≤—ñ—Å–∫—ñ": 250, "—Ä–æ–º": 220,
    "–¥–∂–∏–Ω": 263, "—Ç–µ–∫—ñ–ª–∞": 231, "–ª—ñ–∫–µ—Ä": 327, "–º–∞—Ä—Ç—ñ–Ω—ñ": 140, "—Å–∞–º–æ–≥–æ–Ω": 235,
    "–Ω–∞–ª–∏–≤–∫–∞": 196, "–≥–ª—ñ–Ω—Ç–≤–µ–π–Ω": 132, "–ø—É–Ω—à": 165, "–º–µ–¥–æ–≤—É—Ö–∞": 120, "—Å–∏–¥—Ä": 45,
    "–∞–±—Å–µ–Ω—Ç": 171, "–±—Ä–µ–Ω–¥—ñ": 225,
    
    # –°–Ω–µ–∫–∏ —Ç–∞ —Ñ–∞—Å—Ç—Ñ—É–¥
    "—á—ñ–ø—Å–∏ –∫–∞—Ä—Ç–æ–ø–ª—è–Ω—ñ": 536, "—á—ñ–ø—Å–∏ –∫—É–∫—É—Ä—É–¥–∑—è–Ω—ñ": 498, "–ø–æ–ø–∫–æ—Ä–Ω": 387, "–∫—Ä–µ–∫–µ—Ä–∏": 440,
    "—Å—É—Ö–∞—Ä–∏–∫–∏": 331, "–ø—ñ—Ü—Ü–∞": 266, "–±—É—Ä–≥–µ—Ä": 295, "—Ö–æ—Ç-–¥–æ–≥": 290, "–∫–∞—Ä—Ç–æ–ø–ª—è —Ñ—Ä—ñ": 365,
    "–Ω–∞–≥–≥–µ—Ç—Å–∏": 302, "—Ç–∞–∫–æ": 217, "–±—É—Ä—ñ—Ç–æ": 206, "—Å–µ–Ω–¥–≤—ñ—á": 252, "—à–∞—É—Ä–º–∞": 215,
    "–¥–æ–Ω–µ—Ä": 230, "–∫–µ–±–∞–±": 245, "–ø–∞–Ω—ñ–Ω—ñ": 280, "–±–∞–≥–µ—Ç": 155, "–∫—Ä—É–∞—Å–∞–Ω –∑ –Ω–∞—á–∏–Ω–∫–æ—é": 350,
    "–ø—Ä–µ—Ç—Ü–µ–ª—å": 380, "–Ω–∞—á–æ—Å": 346, "–æ–Ω—ñ–æ–Ω —Ä–∏–Ω–≥—Å": 411, "–º–æ—Ü–∞—Ä–µ–ª–∞ —Å—Ç—ñ–∫—Å": 280,
    "–∫—É—Ä—è—á—ñ –∫—Ä–∏–ª—å—Ü—è": 203, "—Ä–∏–±–Ω—ñ –ø–∞–ª–∏—á–∫–∏": 238, "–∫–∞–ª—å—Ü–æ–Ω–µ": 274, "–∫–∞–ª—å–º–∞—Ä–∏ –≤ –∫–ª—è—Ä–µ": 175,
    "—Å–∏—Ä–Ω—ñ –∫—É–ª—å–∫–∏": 320, "–º—ñ–Ω—ñ–ø—ñ—Ü–∞": 280, "—Ä–æ–ª–ª –∫–∞–ª—ñ—Ñ–æ—Ä–Ω—ñ—è": 176, "—Ä–æ–ª–ª —Ñ—ñ–ª–∞–¥–µ–ª—å—Ñ—ñ—è": 142,
    "—Å—É—à—ñ –∑ –ª–æ—Å–æ—Å–µ–º": 142, "—Å—É—à—ñ –∑ —Ç—É–Ω—Ü–µ–º": 144, "—Ç–µ–º–ø—É—Ä–∞": 255,
    
    # –î–µ–ª—ñ–∫–∞—Ç–µ—Å–∏
    "–º–æ—Ü–∞—Ä–µ–ª–∞": 280, "–ø–∞—Ä–º–µ–∑–∞–Ω": 431, "—Ñ–µ—Ç–∞": 264, "–∫–∞–º–∞–º–±–µ—Ä": 291, "–±p–∏": 334,
    "–¥–æ—Ä –±–ª—é": 353, "—Ä–æ–∫—Ñ–æ—Ä": 369, "—á–µ–¥–¥–µ—Ä": 402, "–≥–∞—É–¥–∞": 356, "–µ–º–º–µ–Ω—Ç–∞–ª—å": 380,
    "–º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ": 429, "—Ä—ñ–∫–æ—Ç—Ç–∞": 174, "—Å–∞–ª—è–º—ñ": 407, "–ø—Ä–æ—à—É—Ç—Ç–æ": 335, "—Ö–∞–º–æ–Ω": 241,
    "—á–æ—Ä—ñ–∑–æ": 455, "–ø–µ–ø–µ—Ä–æ–Ω—ñ": 494, "–∫–∞–ø—ñ–∫–æ–ª–ª–æ": 300, "–ø–∞–Ω—á–µ—Ç—Ç–∞": 458, "–±–∞—Å—Ç—É—Ä–º–∞": 240,
    "–≤'—è–ª–µ–Ω–µ –º'—è—Å–æ": 410, "–æ–ª–∏–≤–∫–∏ –∑–µ–ª–µ–Ω—ñ": 166, "–º–∞—Å–ª–∏–Ω–∏ —á–æ—Ä–Ω—ñ": 361, "–∫–æ—Ä–Ω—ñ—à–æ–Ω–∏": 11,
    "–∫–∞–ø–µ—Ä—Å–∏": 23
}

# –°–∏–Ω–æ–Ω—ñ–º–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
FOOD_SYNONYMS = {
    "–∫—É—Ä–∫–∞": "–∫—É—Ä–∏—Ü—è", "–∫–∞—Ä—Ç–æ—à–∫–∞": "–∫–∞—Ä—Ç–æ–ø–ª—è", "–≥–æ–≤—è–¥–∏–Ω–∞": "—è–ª–æ–≤–∏—á–∏–Ω–∞",
    "–º–æ–ª–æ—á–∫–æ": "–º–æ–ª–æ–∫–æ", "—Ä–∏–±–∫–∞": "–ª–æ—Å–æ—Å—å", "–º'—è—Å–æ": "—è–ª–æ–≤–∏—á–∏–Ω–∞",
    "–ø–∏–≤–∫–æ": "–ø–∏–≤–æ —Å–≤—ñ—Ç–ª–µ", "–≤–∏–Ω—Ü–µ": "–≤–∏–Ω–æ —á–µ—Ä–≤–æ–Ω–µ", "–≥–æ—Ä—ñ–ª–æ—á–∫–∞": "–≥–æ—Ä—ñ–ª–∫–∞",
    "—á—ñ–ø—Å—ñ": "—á—ñ–ø—Å–∏ –∫–∞—Ä—Ç–æ–ø–ª—è–Ω—ñ", "–ø–æ–ø–∫–æ–Ω": "–ø–æ–ø–∫–æ—Ä–Ω", "–ø—ñ—Ü–∞": "–ø—ñ—Ü—Ü–∞",
    "–±—Ä–µ–Ω–¥—ñ": "–∫–æ–Ω—å—è–∫", "—Å–∞–º–æ–≥–æ–Ω–∫–∞": "—Å–∞–º–æ–≥–æ–Ω", "–º–∞–∫–¥–∞–∫": "–±—É—Ä–≥–µ—Ä",
    "—Ñ–∞—Å—Ç—Ñ—É–¥": "–±—É—Ä–≥–µ—Ä", "—Ö–æ—Ç–¥–æ–≥": "—Ö–æ—Ç-–¥–æ–≥"
}

# –ü–æ—Å—Ç—ñ–π–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
MAIN_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"), KeyboardButton(text="üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
        [KeyboardButton(text="üçé –ö–∞–ª–æ—Ä—ñ—ó"), KeyboardButton(text="üíß –í–æ–¥–∞")],
        [KeyboardButton(text="‚öñÔ∏è –Ü–ú–¢"), KeyboardButton(text="üí° –ü–æ—Ä–∞–¥–∏")],
        [KeyboardButton(text="üìà –í–∞–≥–∞"), KeyboardButton(text="üìÖ –©–æ–¥–µ–Ω–Ω–∏–∫")]
    ],
    resize_keyboard=True,
    persistent=True
)

# –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
def save_users():
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É JSON"""
    try:
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_db, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")

def load_users():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ JSON"""
    global users_db
    try:
        if os.path.exists(USER_DATA_FILE):
            with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
                users_db = json.load(f)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
        users_db = {}

# –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
def calculate_bmr(weight, height, age, gender):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª—ñ–∑–º—É –∑–∞ —Ñ–æ—Ä–º—É–ª–æ—é –•–∞—Ä—Ä—ñ—Å–∞-–ë–µ–Ω–µ–¥–∏–∫—Ç–∞"""
    if gender == "–ß–æ–ª–æ–≤—ñ–∫":
        return round(88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age))
    else:
        return round(447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age))

def get_activity_multiplier(activity):
    """–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    multipliers = {
        "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ (—Å–∏–¥—è—á–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è)": 1.2,
        "–õ–µ–≥–∫–∞ (1-3 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)": 1.375,
        "–ü–æ–º—ñ—Ä–Ω–∞ (3-5 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)": 1.55,
        "–ê–∫—Ç–∏–≤–Ω–∞ (6-7 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)": 1.725,
        "–î—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ (2 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å)": 1.9
    }
    return multipliers.get(activity, 1.2)

def calculate_daily_calories(bmr, activity):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–µ–Ω–Ω–æ—ó –Ω–æ—Ä–º–∏ –∫–∞–ª–æ—Ä—ñ–π"""
    multiplier = get_activity_multiplier(activity)
    return round(bmr * multiplier)

def adjust_calories_for_goal(daily_calories, goal):
    """–ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –º–µ—Ç–∏"""
    if goal == "–°—Ö—É–¥–Ω—É—Ç–∏":
        return daily_calories - 500
    elif goal == "–ù–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É":
        return daily_calories + 500
    return daily_calories

def calculate_bmi(weight, height):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω–¥–µ–∫—Å—É –º–∞—Å–∏ —Ç—ñ–ª–∞"""
    height_m = height / 100
    return round(weight / (height_m ** 2), 1)

def get_bmi_category(bmi):
    """–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ü–ú–¢"""
    if bmi < 18.5:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –≤–∞–≥–∞", "üîµ"
    elif 18.5 <= bmi < 25:
        return "–ù–æ—Ä–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞", "üü¢"
    elif 25 <= bmi < 30:
        return "–ù–∞–¥–ª–∏—à–∫–æ–≤–∞ –≤–∞–≥–∞", "üü°"
    else:
        return "–û–∂–∏—Ä—ñ–Ω–Ω—è", "üî¥"

def calculate_water_intake(weight, activity):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ—Ä–º–∏ –≤–æ–¥–∏"""
    base_water = weight * 35  # –º–ª –Ω–∞ –∫–≥
    activity_multiplier = get_activity_multiplier(activity)
    if activity_multiplier > 1.5:
        base_water *= 1.2
    elif activity_multiplier > 1.3:
        base_water *= 1.1
    return round(base_water)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç—ñ–π–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ (–í–ê–ñ–õ–ò–í–û: –ü–ï–†–ï–î FSM –æ–±—Ä–æ–±–Ω–∏–∫–∞–º–∏)
@dp.message(F.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def main_menu_button(message: Message):
    await main_menu(message)

@dp.message(F.text == "üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")
async def profile_button(message: Message):
    await show_profile(message)

@dp.message(F.text == "üçé –ö–∞–ª–æ—Ä—ñ—ó")
async def calories_button(message: Message, state: FSMContext):
    await message.answer("üçé –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–∞–ª–æ—Ä—ñ–π:")
    await state.set_state(FoodCalories.waiting_for_food)

@dp.message(F.text == "üíß –í–æ–¥–∞")
async def water_button(message: Message):
    await show_water_recommendations(message)

@dp.message(F.text == "‚öñÔ∏è –Ü–ú–¢")
async def bmi_button(message: Message):
    await show_bmi_info(message)

@dp.message(F.text == "üí° –ü–æ—Ä–∞–¥–∏")
async def tips_button(message: Message):
    await show_daily_tips(message)

@dp.message(F.text == "üìà –í–∞–≥–∞")
async def weight_button(message: Message):
    await show_weight_tracker_menu(message)

@dp.message(F.text == "üìÖ –©–æ–¥–µ–Ω–Ω–∏–∫")
async def diary_button(message: Message):
    await show_food_diary_menu(message)

# –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
async def main_menu(message: Message):
    """–ü–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
        [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—É", callback_data="calculate_food")],
        [InlineKeyboardButton(text="üìà –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="my_profile")],
        [InlineKeyboardButton(text="üíß –ù–æ—Ä–º–∞ –≤–æ–¥–∏", callback_data="water_intake")],
        [InlineKeyboardButton(text="‚öñÔ∏è –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ü–ú–¢", callback_data="calculate_bmi")],
        [InlineKeyboardButton(text="üí° –©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏", callback_data="daily_tips")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ])
    
    menu_image = "https://images.unsplash.com/photo-1498837167922-ddd27525d352?w=800&h=600&fit=crop"
    
    await message.answer_photo(
        photo=menu_image,
        caption="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n\n–í—ñ—Ç–∞—é —É –±–æ—Ç—ñ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è!\n–û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏:",
        reply_markup=keyboard
    )

async def show_profile(message: Message):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = str(message.from_user.id)
    
    if user_id not in users_db:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")]
        ])
        await message.answer(
            "üë§ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –ø—Ä–æ—Ñ—ñ–ª—é üòî\n\n–°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π!",
            reply_markup=keyboard
        )
        return
    
    user = users_db[user_id]
    profile_text = f"""
üë§ **–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:**

üìã **–û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ:**
‚Ä¢ –Ü–º'—è: {user.get('name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –°—Ç–∞—Ç—å: {user['gender']}
‚Ä¢ –í—ñ–∫: {user['age']} —Ä–æ–∫—ñ–≤
‚Ä¢ –ó—Ä—ñ—Å—Ç: {user['height']} —Å–º
‚Ä¢ –í–∞–≥–∞: {user['weight']} –∫–≥
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user['activity']}
‚Ä¢ –ú–µ—Ç–∞: {user['goal']}

üìä **–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏:**
‚Ä¢ –ë–∞–∑–æ–≤–∏–π –º–µ—Ç–∞–±–æ–ª—ñ–∑–º: {user['bmr']} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –î–µ–Ω–Ω–∞ –Ω–æ—Ä–º–∞: {user['daily_calories']} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: {user['target_calories']} –∫–∫–∞–ª/–¥–µ–Ω—å

üíß **–í–æ–¥–∞:** {calculate_water_intake(user['weight'], user['activity'])} –º–ª/–¥–µ–Ω—å
‚öñÔ∏è **–Ü–ú–¢:** {calculate_bmi(user['weight'], user['height'])}
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
        [InlineKeyboardButton(text="üíß –ù–æ—Ä–º–∞ –≤–æ–¥–∏", callback_data="water_intake")],
        [InlineKeyboardButton(text="‚öñÔ∏è –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ü–ú–¢", callback_data="calculate_bmi")]
    ])
    
    profile_image = "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&h=600&fit=crop"
    
    await message.answer_photo(
        photo=profile_image,
        caption=profile_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def show_water_recommendations(message: Message):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤–æ–¥–∏"""
    user_id = str(message.from_user.id)
    
    if user_id not in users_db:
        await message.answer("üíß –î–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ω–æ—Ä–º–∏ –≤–æ–¥–∏ —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å!")
        return
    
    user = users_db[user_id]
    water_ml = calculate_water_intake(user['weight'], user['activity'])
    water_glasses = round(water_ml / 250)
    
    water_text = f"""
üíß **–í–∞—à–∞ –¥–µ–Ω–Ω–∞ –Ω–æ—Ä–º–∞ –≤–æ–¥–∏:**

üìä **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**
‚Ä¢ **{water_ml} –º–ª** –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –¶–µ –ø—Ä–∏–±–ª–∏–∑–Ω–æ **{water_glasses} —Å–∫–ª—è–Ω–æ–∫** –ø–æ 250–º–ª
‚Ä¢ –ü–∏–π—Ç–µ —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ –ø—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è

üí° **–ü–æ—Ä–∞–¥–∏:**
‚Ä¢ –ü–æ—á–Ω—ñ—Ç—å –¥–µ–Ω—å –∑—ñ —Å–∫–ª—è–Ω–∫–∏ –≤–æ–¥–∏
‚Ä¢ –ü–∏–π—Ç–µ –≤–æ–¥—É –∑–∞ 30 —Ö–≤ –¥–æ —ó–∂—ñ
‚Ä¢ –ù–æ—Å—ñ—Ç—å –ø–ª—è—à–∫—É –≤–æ–¥–∏ –∑ —Å–æ–±–æ—é
‚Ä¢ –î–æ–¥–∞–π—Ç–µ –ª–∏–º–æ–Ω –¥–ª—è —Å–º–∞–∫—É
    """
    
    water_image = "https://images.unsplash.com/photo-1550583724-b2692b85b150?w=800&h=600&fit=crop"
    
    await message.answer_photo(
        photo=water_image,
        caption=water_text,
        parse_mode='Markdown'
    )

async def show_bmi_info(message: Message):
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ü–ú–¢"""
    user_id = str(message.from_user.id)
    
    if user_id not in users_db:
        await message.answer("‚öñÔ∏è –î–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ü–ú–¢ —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å!")
        return
    
    user = users_db[user_id]
    bmi = calculate_bmi(user['weight'], user['height'])
    category, emoji = get_bmi_category(bmi)
    
    bmi_text = f"""
‚öñÔ∏è **–í–∞—à —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ (–Ü–ú–¢):**

üìä **–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:**
‚Ä¢ **–Ü–ú–¢: {bmi}**
‚Ä¢ {emoji} **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category}

üìà **–®–∫–∞–ª–∞ –Ü–ú–¢:**
üîµ **< 18.5** - –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –≤–∞–≥–∞
üü¢ **18.5-24.9** - –Ω–æ—Ä–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞
üü° **25.0-29.9** - –Ω–∞–¥–ª–∏—à–∫–æ–≤–∞ –≤–∞–≥–∞
üî¥ **‚â• 30.0** - –æ–∂–∏—Ä—ñ–Ω–Ω—è

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:** {'–í—ñ–¥–º—ñ–Ω–Ω–æ! –ü—ñ–¥—Ç—Ä–∏–º—É–π—Ç–µ –ø–æ—Ç–æ—á–Ω—É –≤–∞–≥—É.' if category == '–ù–æ—Ä–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞' else '–†–æ–∑–≥–ª—è–Ω—å—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∫–æ—Ä–µ–≥—É–≤–∞–Ω–Ω—è –≤–∞–≥–∏.'}
    """
    
    bmi_image = "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&h=600&fit=crop"
    
    await message.answer_photo(
        photo=bmi_image,
        caption=bmi_text,
        parse_mode='Markdown'
    )

async def show_daily_tips(message: Message):
    """–©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏"""
    tips = [
        "ü•ó –á–∂—Ç–µ 5 –ø–æ—Ä—Ü—ñ–π –æ–≤–æ—á—ñ–≤ —Ç–∞ —Ñ—Ä—É–∫—Ç—ñ–≤ –Ω–∞ –¥–µ–Ω—å",
        "üö∂ –†–æ–±—ñ—Ç—å –º—ñ–Ω—ñ–º—É–º 10,000 –∫—Ä–æ–∫—ñ–≤ —â–æ–¥–Ω—è",
        "üí§ –°–ø—ñ—Ç—å 7-9 –≥–æ–¥–∏–Ω –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–º—É",
        "ü•õ –ü–∏–π—Ç–µ –≤–æ–¥—É –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è",
        "üçΩÔ∏è –á–∂—Ç–µ –ø–æ–≤—ñ–ª—å–Ω–æ —Ç–∞ —Ä–µ—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∂–æ–≤—É–π—Ç–µ",
        "ü•ú –î–æ–¥–∞–π—Ç–µ –≥–æ—Ä—ñ—Ö–∏ –¥–æ —Å–Ω—ñ–¥–∞–Ω–∫—É",
        "üêü –á–∂—Ç–µ —Ä–∏–±—É 2-3 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å",
        "ü•¶ –ì–æ—Ç—É–π—Ç–µ –æ–≤–æ—á—ñ –Ω–∞ –ø–∞—Ä—ñ –∑–∞–º—ñ—Å—Ç—å —Å–º–∞–∂–µ–Ω–Ω—è",
        "üçØ –ó–∞–º—ñ–Ω—ñ—Ç—å —Ü—É–∫–æ—Ä –Ω–∞ –º–µ–¥",
        "üßò –ú–µ–¥–∏—Ç—É–π—Ç–µ 10 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –¥–µ–Ω—å",
        "üèÉ –†–æ–±—ñ—Ç—å –ø–µ—Ä–µ—Ä–≤–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏",
        "ü•ë –í–∫–ª—é—á–∞–π—Ç–µ –∫–æ—Ä–∏—Å–Ω—ñ –∂–∏—Ä–∏ –≤ —Ä–∞—Ü—ñ–æ–Ω",
        "üå± –á–∂—Ç–µ —Ü—ñ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ñ –ø—Ä–æ–¥—É–∫—Ç–∏",
        "üçä –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ —Å–Ω—ñ–¥–∞–Ω–æ–∫",
        "üíÜ –†–æ–±—ñ—Ç—å –º–∞—Å–∞–∂ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∫—Ä–æ–≤–æ–æ–±—ñ–≥—É",
        "üåø –î–æ–¥–∞–≤–∞–π—Ç–µ –∑–µ–ª–µ–Ω—å –¥–æ –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–∏–π–æ–º—É —ó–∂—ñ",
        "üèãÔ∏è –ó–∞–π–º–∞–π—Ç–µ—Å—è —Å–∏–ª–æ–≤–∏–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏ 2 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å",
        "üßä –ü—Ä–∏–π–º–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∏–π –¥—É—à",
        "üì± –û–±–º–µ–∂—Ç–µ —á–∞—Å –ø–µ—Ä–µ–¥ –µ–∫—Ä–∞–Ω–∞–º–∏",
        "üåÖ –ü—Ä–æ–∫–∏–¥–∞–π—Ç–µ—Å—è –≤ –æ–¥–∏–Ω —ñ —Ç–æ–π –∂–µ —á–∞—Å"
    ]
    
    daily_tips_list = random.sample(tips, 5)
    tips_text = "\n".join([f"{i+1}. {tip}" for i, tip in enumerate(daily_tips_list)])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ñ –ø–æ—Ä–∞–¥–∏", callback_data="daily_tips")]
    ])
    
    tips_full_text = f"üí° **–©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤'—è:**\n\n{tips_text}"
    
    tips_image = "https://images.unsplash.com/photo-1506629905107-bb5842dcbc67?w=800&h=600&fit=crop"
    
    await message.answer_photo(
        photo=tips_image,
        caption=tips_full_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def show_weight_tracker_menu(message: Message):
    """–ú–µ–Ω—é —Ç—Ä–µ–∫–µ—Ä–∞ –≤–∞–≥–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –≤–∞–≥—É", callback_data="add_weight")],
        [InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å", callback_data="show_progress")]
    ])
    
    await message.answer(
        "üìà **–¢—Ä–µ–∫–µ—Ä –≤–∞–≥–∏**\n\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def show_food_diary_menu(message: Message):
    """–ú–µ–Ω—é —â–æ–¥–µ–Ω–Ω–∏–∫–∞ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_food_diary")],
        [InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data="show_today_diary")]
    ])
    
    await message.answer(
        "üìÖ **–©–æ–¥–µ–Ω–Ω–∏–∫ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è**\n\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_handler(message: Message):
    user_name = message.from_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    
    start_text = f"""
üëã –ü—Ä–∏–≤—ñ—Ç, **{user_name}**!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è! ü•ó

üéØ **–©–æ —è –º–æ–∂—É:**
‚Ä¢ –†–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
‚Ä¢ –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
‚Ä¢ –†–∞—Ö—É–≤–∞—Ç–∏ –Ω–æ—Ä–º—É –≤–æ–¥–∏ —Ç–∞ –Ü–ú–¢
‚Ä¢ –î–∞–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏
‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –≤–∞–≥–∏

–ü–æ—á–Ω–µ–º–æ –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é! üëá
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏", callback_data="main_menu")]
    ])
    
    start_image = "https://images.unsplash.com/photo-1490645935967-10de6ba17061?w=800&h=600&fit=crop"
    
    await message.answer_photo(
        photo=start_image,
        caption=start_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

# –û–±—Ä–æ–±–Ω–∏–∫ callback –∑–∞–ø–∏—Ç—ñ–≤
@dp.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    await callback.message.delete()
    await main_menu(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "my_profile")
async def my_profile_callback(callback: CallbackQuery):
    await callback.message.delete()
    await show_profile(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "create_profile")
async def create_profile_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("üëã –Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?")
    await state.set_state(UserProfile.waiting_for_name)
    await callback.answer()

@dp.callback_query(F.data == "calculate_food")
async def calculate_food_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("üçé –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–∞–ª–æ—Ä—ñ–π:")
    await state.set_state(FoodCalories.waiting_for_food)
    await callback.answer()

@dp.callback_query(F.data == "water_intake")
async def water_intake_callback(callback: CallbackQuery):
    await callback.message.delete()
    await show_water_recommendations(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "calculate_bmi")
async def calculate_bmi_callback(callback: CallbackQuery):
    await callback.message.delete()
    await show_bmi_info(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "daily_tips")
async def daily_tips_callback(callback: CallbackQuery):
    await callback.message.delete()
    await show_daily_tips(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "add_weight")
async def add_weight_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("üìà –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –ø–æ—Ç–æ—á–Ω—É –≤–∞–≥—É (–∫–≥):")
    await state.set_state(WeightTracker.waiting_for_weight)
    await callback.answer()

@dp.callback_query(F.data == "add_food_diary")
async def add_food_diary_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞:")
    await state.set_state(FoodDiary.waiting_for_food)
    await callback.answer()

# FSM –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
@dp.message(UserProfile.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üë§ –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë® –ß–æ–ª–æ–≤—ñ–∫", callback_data="gender_male")],
        [InlineKeyboardButton(text="üë© –ñ—ñ–Ω–∫–∞", callback_data="gender_female")]
    ]))

@dp.callback_query(F.data.startswith("gender_"))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    gender = "–ß–æ–ª–æ–≤—ñ–∫" if callback.data == "gender_male" else "–ñ—ñ–Ω–∫–∞"
    await state.update_data(gender=gender)
    await callback.message.edit_text("üéÇ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫ (—Ä–æ–∫—ñ–≤):")
    await state.set_state(UserProfile.waiting_for_age)
    await callback.answer()

@dp.message(UserProfile.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if 10 <= age <= 100:
            await state.update_data(age=age)
            await message.answer("‚öñÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É (–∫–≥):")
            await state.set_state(UserProfile.waiting_for_weight)
        else:
            await message.answer("‚ùå –í—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥ 10 –¥–æ 100 —Ä–æ–∫—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

@dp.message(UserProfile.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        if 30 <= weight <= 300:
            await state.update_data(weight=weight)
            await message.answer("üìè –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑—Ä—ñ—Å—Ç (—Å–º):")
            await state.set_state(UserProfile.waiting_for_height)
        else:
            await message.answer("‚ùå –í–∞–≥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 30 –¥–æ 300 –∫–≥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

@dp.message(UserProfile.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = int(message.text)
        if 100 <= height <= 250:
            await state.update_data(height=height)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõãÔ∏è –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞", callback_data="activity_minimal")],
                [InlineKeyboardButton(text="üö∂ –õ–µ–≥–∫–∞", callback_data="activity_light")],
                [InlineKeyboardButton(text="üèÉ –ü–æ–º—ñ—Ä–Ω–∞", callback_data="activity_moderate")],
                [InlineKeyboardButton(text="üí™ –ê–∫—Ç–∏–≤–Ω–∞", callback_data="activity_active")],
                [InlineKeyboardButton(text="üèãÔ∏è –î—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞", callback_data="activity_very_active")]
            ])
            
            await message.answer(
                "‚ö° –û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –≤–∞—à–æ—ó —Ñ—ñ–∑–∏—á–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:\n\n"
                "üõãÔ∏è **–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞** - —Å–∏–¥—è—á–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è\n"
                "üö∂ **–õ–µ–≥–∫–∞** - 1-3 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å\n"
                "üèÉ **–ü–æ–º—ñ—Ä–Ω–∞** - 3-5 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å\n" 
                "üí™ **–ê–∫—Ç–∏–≤–Ω–∞** - 6-7 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å\n"
                "üèãÔ∏è **–î—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞** - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Å–ø–æ—Ä—Ç",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            await state.set_state(UserProfile.waiting_for_activity)
        else:
            await message.answer("‚ùå –ó—Ä—ñ—Å—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥ 100 –¥–æ 250 —Å–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∑—Ä—ñ—Å—Ç —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

@dp.callback_query(F.data.startswith("activity_"))
async def process_activity(callback: CallbackQuery, state: FSMContext):
    activities = {
        "activity_minimal": "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ (—Å–∏–¥—è—á–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è)",
        "activity_light": "–õ–µ–≥–∫–∞ (1-3 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)",
        "activity_moderate": "–ü–æ–º—ñ—Ä–Ω–∞ (3-5 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)",
        "activity_active": "–ê–∫—Ç–∏–≤–Ω–∞ (6-7 —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)",
        "activity_very_active": "–î—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ (2 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å)"
    }
    
    activity = activities[callback.data]
    await state.update_data(activity=activity)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìâ –°—Ö—É–¥–Ω—É—Ç–∏", callback_data="goal_lose")],
        [InlineKeyboardButton(text="‚öñÔ∏è –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–∞–≥—É", callback_data="goal_maintain")],
        [InlineKeyboardButton(text="üìà –ù–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É", callback_data="goal_gain")]
    ])
    
    await callback.message.edit_text("üéØ –Ø–∫–∞ –≤–∞—à–∞ –º–µ—Ç–∞?", reply_markup=keyboard)
    await state.set_state(UserProfile.waiting_for_goal)
    await callback.answer()

@dp.callback_query(F.data.startswith("goal_"))
async def process_goal(callback: CallbackQuery, state: FSMContext):
    goals = {
        "goal_lose": "–°—Ö—É–¥–Ω—É—Ç–∏",
        "goal_maintain": "–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–∞–≥—É", 
        "goal_gain": "–ù–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É"
    }
    
    goal = goals[callback.data]
    data = await state.get_data()
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
    bmr = calculate_bmr(data['weight'], data['height'], data['age'], data['gender'])
    daily_calories = calculate_daily_calories(bmr, data['activity'])
    target_calories = adjust_calories_for_goal(daily_calories, goal)
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
    user_id = str(callback.from_user.id)
    users_db[user_id] = {
        'name': data['name'],
        'gender': data['gender'],
        'age': data['age'],
        'weight': data['weight'],
        'height': data['height'],
        'activity': data['activity'],
        'goal': goal,
        'bmr': bmr,
        'daily_calories': daily_calories,
        'target_calories': target_calories,
        'created_at': datetime.now().isoformat()
    }
    
    save_users()
    
    success_text = f"""
‚úÖ **–ü—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!**

üë§ **{data['name']}** ({data['gender']})
üìä **–í–∞—à—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**

üî• **–ë–∞–∑–æ–≤–∏–π –º–µ—Ç–∞–±–æ–ª—ñ–∑–º:** {bmr} –∫–∫–∞–ª/–¥–µ–Ω—å
‚ö° **–î–µ–Ω–Ω–∞ –Ω–æ—Ä–º–∞:** {daily_calories} –∫–∫–∞–ª/–¥–µ–Ω—å  
üéØ **–î–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –º–µ—Ç–∏:** {target_calories} –∫–∫–∞–ª/–¥–µ–Ω—å
üíß **–ù–æ—Ä–º–∞ –≤–æ–¥–∏:** {calculate_water_intake(data['weight'], data['activity'])} –º–ª/–¥–µ–Ω—å

–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞! üéâ
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó", callback_data="calculate_food")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(success_text, reply_markup=keyboard, parse_mode='Markdown')
    await state.clear()
    await callback.answer("–ü—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ! üéâ")

# FSM –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–∞–ª–æ—Ä—ñ–π
@dp.message(FoodCalories.waiting_for_food)
async def process_food_search(message: Message, state: FSMContext):
    product_name = message.text.lower().strip()
    
    # –ü–æ—à—É–∫ –ø—Ä–æ–¥—É–∫—Ç—É
    found_product = None
    for product, calories in FOOD_DATABASE.items():
        if product_name in product or product in product_name:
            found_product = (product, calories)
            break
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–Ω–æ–Ω—ñ–º—ñ–≤
    if not found_product:
        for synonym, real_name in FOOD_SYNONYMS.items():
            if synonym in product_name:
                if real_name in FOOD_DATABASE:
                    found_product = (real_name, FOOD_DATABASE[real_name])
                    break
    
    if found_product:
        await message.answer(f"üçΩÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç: **{found_product[0]}**\n\nüí° –í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É –≤ –≥—Ä–∞–º–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 100):", parse_mode='Markdown')
        await state.update_data(product_name=found_product[0], calories_per_100g=found_product[1])
        await state.set_state(FoodCalories.waiting_for_weight)
    else:
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
        popular_products = "üçé —è–±–ª—É–∫–æ, üçå –±–∞–Ω–∞–Ω, üçó –∫—É—Ä–∏—Ü—è, ü•© —è–ª–æ–≤–∏—á–∏–Ω–∞, ü•õ –º–æ–ª–æ–∫–æ, üçû —Ö–ª—ñ–±, üçö —Ä–∏—Å, ü•î –∫–∞—Ä—Ç–æ–ø–ª—è"
        await message.answer(
            f"üòï –ü—Ä–æ–¥—É–∫—Ç '**{product_name}**' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n"
            f"üí° **–ü–æ–ø—É–ª—è—Ä–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏:**\n{popular_products}\n\n"
            f"üîç –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –Ω–∞–∑–≤—É –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –∑ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö.",
            parse_mode='Markdown'
        )

@dp.message(FoodCalories.waiting_for_weight)
async def process_food_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        if 1 <= weight <= 5000:
            data = await state.get_data()
            calories = round((data['calories_per_100g'] * weight) / 100)
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
            product = data['product_name'].lower()
            
            if any(fruit in product for fruit in ['—è–±–ª—É–∫–æ', '–±–∞–Ω–∞–Ω', '–∞–ø–µ–ª—å—Å–∏–Ω', '–≥—Ä—É—à–∞', '–∫—ñ–≤—ñ', '–∞–Ω–∞–Ω–∞—Å']):
                image_url = "https://images.unsplash.com/photo-1610832958506-aa56368176cf?w=800&h=600&fit=crop"
            elif any(veg in product for veg in ['–ø–æ–º—ñ–¥–æ—Ä', '–æ–≥—ñ—Ä–æ–∫', '–º–æ—Ä–∫–≤–∞', '–∫–∞–ø—É—Å—Ç–∞', '–∫–∞—Ä—Ç–æ–ø–ª—è']):
                image_url = "https://images.unsplash.com/photo-1540420773420-3366772f4999?w=800&h=600&fit=crop"
            elif any(meat in product for meat in ['–∫—É—Ä–∏—Ü—è', '—è–ª–æ–≤–∏—á–∏–Ω–∞', '—Å–≤–∏–Ω–∏–Ω–∞', '–º\'—è—Å–æ']):
                image_url = "https://images.unsplash.com/photo-1588347818192-6d9c4541ea8f?w=800&h=600&fit=crop"
            else:
                image_url = "https://images.unsplash.com/photo-1498837167922-ddd27525d352?w=800&h=600&fit=crop"
            
            result_text = f"""
üçΩÔ∏è **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:**

üì¶ **–ü—Ä–æ–¥—É–∫—Ç:** {data['product_name']}
‚öñÔ∏è **–í–∞–≥–∞:** {weight} –≥
üî• **–ö–∞–ª–æ—Ä—ñ—ó:** {calories} –∫–∫–∞–ª

üìä **–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:**
‚Ä¢ –ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å –Ω–∞ 100–≥: {data['calories_per_100g']} –∫–∫–∞–ª
‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ –¥–µ–Ω–Ω–æ—ó –Ω–æ—Ä–º–∏: {round(calories/2000*100, 1)}%
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –Ü–Ω—à–∏–π –ø—Ä–æ–¥—É–∫—Ç", callback_data="calculate_food")],
                [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await message.answer_photo(
                photo=image_url,
                caption=result_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
            await state.clear()
        else:
            await message.answer("‚ùå –í–∞–≥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 5000 –≥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

# –î–æ–¥–∞–º–æ –±—ñ–ª—å—à–µ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ callback_query
@dp.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    help_text = """
‚ÑπÔ∏è **–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É**

üéØ **–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**
‚Ä¢ **üìä –ü—Ä–æ—Ñ—ñ–ª—å** - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
‚Ä¢ **üçé –ö–∞–ª–æ—Ä—ñ—ó** - —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–∞–ª–æ—Ä—ñ–π –ø—Ä–æ–¥—É–∫—Ç—ñ–≤  
‚Ä¢ **üíß –í–æ–¥–∞** - –Ω–æ—Ä–º–∞ –≤–æ–¥–∏ –Ω–∞ –¥–µ–Ω—å
‚Ä¢ **‚öñÔ∏è –Ü–ú–¢** - —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞
‚Ä¢ **üí° –ü–æ—Ä–∞–¥–∏** - —â–æ–¥–µ–Ω–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

üîç **–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**
1. –°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
3. –í–≤–æ–¥—å—Ç–µ –Ω–∞–∑–≤–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–∞–ª–æ—Ä—ñ–π

‚ùì **–ü–∏—Ç–∞–Ω–Ω—è?** –ü–∏—à—ñ—Ç—å /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
    """
    
    help_image = "https://images.unsplash.com/photo-1434030216411-0b793f4b4173?w=800&h=600&fit=crop"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.answer_photo(
        photo=help_image,
        caption=help_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    await callback.answer()

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    load_users()
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    print(f"üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(users_db)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    print(f"üçé –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: {len(FOOD_DATABASE)} –ø–æ–∑–∏—Ü—ñ–π")
    
    try:
        await bot.set_my_commands([
            types.BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
            types.BotCommand(command="help", description="‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞")
        ])
        
        await dp.start_polling(bot, allowed_updates=['message', 'callback_query'])
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
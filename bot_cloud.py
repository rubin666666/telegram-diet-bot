import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import json
import os
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ—Ç—Ä–∏–º–∞–π—Ç–µ –≤—ñ–¥ @BotFather)
BOT_TOKEN = os.getenv("BOT_TOKEN", "8458486366:AAH4DnunseoCOdyyRS7fueLKeW4ELSZc3QA")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°—Ç–∞–Ω–∏ –¥–ª—è FSM
class UserProfile(StatesGroup):
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_height = State()
    waiting_for_weight = State()
    waiting_for_activity = State()
    waiting_for_goal = State()

class FoodCalories(StatesGroup):
    waiting_for_food = State()
    waiting_for_weight_food = State()

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ë–î)
users_db = {}

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ (–∫–∞–ª–æ—Ä—ñ—ó –Ω–∞ 100–≥) - –†–æ–∑—à–∏—Ä–µ–Ω–∞ –±–∞–∑–∞
food_db = {
    # üçé –§—Ä—É–∫—Ç–∏ —Ç–∞ —è–≥–æ–¥–∏
    "—è–±–ª—É–∫–æ": 52, "–±–∞–Ω–∞–Ω": 89, "–∞–ø–µ–ª—å—Å–∏–Ω": 47, "–º–∞–Ω–¥–∞—Ä–∏–Ω": 53, "–ª–∏–º–æ–Ω": 29,
    "–≥—Ä–µ–π–ø—Ñ—Ä—É—Ç": 35, "–≥—Ä—É—à–∞": 57, "–ø–µ—Ä—Å–∏–∫": 39, "–∞–±—Ä–∏–∫–æ—Å": 48, "—Å–ª–∏–≤–∞": 46,
    "–≤–∏—à–Ω—è": 52, "—á–µ—Ä–µ—à–Ω—è": 63, "–≤–∏–Ω–æ–≥—Ä–∞–¥": 65, "–ø–æ–ª—É–Ω–∏—Ü—è": 32, "–º–∞–ª–∏–Ω–∞": 46,
    "—á–æ—Ä–Ω–∏—Ü—è": 57, "—Å–º–æ—Ä–æ–¥–∏–Ω–∞": 44, "–∫—ñ–≤—ñ": 61, "–∞–Ω–∞–Ω–∞—Å": 50, "–º–∞–Ω–≥–æ": 60,
    
    # ü•ï –û–≤–æ—á—ñ
    "–ø–æ–º—ñ–¥–æ—Ä": 18, "–æ–≥—ñ—Ä–æ–∫": 16, "–º–æ—Ä–∫–≤–∞": 41, "—Ü–∏–±—É–ª—è": 40, "–∫–∞—Ä—Ç–æ–ø–ª—è": 77,
    "–∫–∞–ø—É—Å—Ç–∞": 25, "–±—É—Ä—è–∫": 43, "–∫–∞–±–∞—á–æ–∫": 24, "–±–∞–∫–ª–∞–∂–∞–Ω": 24, "–ø–µ—Ä–µ—Ü—å": 27,
    "–ø–µ—Ä–µ—Ü—å –±–æ–ª–≥–∞—Ä—Å—å–∫–∏–π": 27, "–ø–µ—Ä–µ—Ü—å –≥–æ—Å—Ç—Ä–∏–π": 40, "—Å–∞–ª–∞—Ç": 14, "—à–ø–∏–Ω–∞—Ç": 23,
    "–±—Ä–æ–∫–æ–ª—ñ": 34, "—Ü–≤—ñ—Ç–Ω–∞ –∫–∞–ø—É—Å—Ç–∞": 25, "–∫—É–∫—É—Ä—É–¥–∑–∞": 96, "–≥–æ—Ä–æ—à–æ–∫": 81,
    "–∫–≤–∞—Å–æ–ª—è": 93, "—Ä–µ–¥–∏—Å–∫–∞": 19, "—Ä–µ–¥—å–∫–∞": 36, "—á–∞—Å–Ω–∏–∫": 149, "—ñ–º–±–∏—Ä": 80,
    
    # üåæ –ö—Ä—É–ø–∏ —Ç–∞ –∫–∞—à—ñ
    "—Ä–∏—Å": 130, "–≥—Ä–µ—á–∫–∞": 343, "–≤—ñ–≤—Å—è–Ω–∫–∞": 389, "–ø—à–æ–Ω–æ": 348, "–ø–µ—Ä–ª–æ–≤–∫–∞": 320,
    "–º–∞–Ω–∫–∞": 328, "–∫—É–∫—É—Ä—É–¥–∑—è–Ω–∞ –∫–∞—à–∞": 337, "—è—á–º—ñ–Ω—å": 288, "–∫–∏–Ω–æ–∞": 368,
    
    # üçû –•–ª—ñ–±–æ–±—É–ª–æ—á–Ω—ñ –≤–∏—Ä–æ–±–∏
    "—Ö–ª—ñ–±": 265, "—Ö–ª—ñ–± —á–æ—Ä–Ω–∏–π": 214, "—Ö–ª—ñ–± –±—ñ–ª–∏–π": 265, "–±–∞—Ç–æ–Ω": 260,
    "–ª–∞–≤–∞—à": 236, "—Ç–æ—Å—Ç–∏": 290, "—Å—É—Ö–∞—Ä–∏–∫–∏": 331, "–ø–µ—á–∏–≤–æ": 417, "–ø—Ä—è–Ω–∏–∫–∏": 364,
    
    # üçù –ú–∞–∫–∞—Ä–æ–Ω–Ω—ñ –≤–∏—Ä–æ–±–∏
    "–º–∞–∫–∞—Ä–æ–Ω–∏": 371, "—Å–ø–∞–≥–µ—Ç—ñ": 371, "–ª–∞–ø—à–∞": 322, "–≤–µ—Ä–º—ñ—à–µ–ª—å": 371,
    
    # ü•õ –ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
    "–º–æ–ª–æ–∫–æ": 60, "–∫–µ—Ñ—ñ—Ä": 56, "—Ä—è–∂–∞–Ω–∫–∞": 85, "—Å–º–µ—Ç–∞–Ω–∞": 206, "–π–æ–≥—É—Ä—Ç": 59,
    "—Ç–≤–æ—Ä–æ–≥": 101, "—Å–∏—Ä": 402, "—Å–∏—Ä —Ä–æ—Å—ñ–π—Å—å–∫–∏–π": 364, "—Å–∏—Ä –≥–æ–ª–ª–∞–Ω–¥—Å—å–∫–∏–π": 377,
    "–º–∞—Å–ª–æ –≤–µ—Ä—à–∫–æ–≤–µ": 717, "–≤–µ—Ä—à–∫–∏": 118,
    
    # ü•ö –Ø–π—Ü—è
    "—è–π—Ü–µ": 155, "—è–π—Ü–µ –∫—É—Ä–µ—á–µ": 155, "—è–π—Ü–µ –ø–µ—Ä–µ–ø–µ–ª–∏–Ω–µ": 168,
    "—è—î—á–Ω–∏–π –±—ñ–ª–æ–∫": 52, "—è—î—á–Ω–∏–π –∂–æ–≤—Ç–æ–∫": 322,
    
    # üçñ –ú'—è—Å–æ
    "—è–ª–æ–≤–∏—á–∏–Ω–∞": 187, "—Å–≤–∏–Ω–∏–Ω–∞": 259, "–±–∞—Ä–∞–Ω–∏–Ω–∞": 203, "—Ç–µ–ª—è—Ç–∏–Ω–∞": 97,
    "–∫—É—Ä–∏—Ü—è": 165, "—ñ–Ω–¥–∏—á–∫–∞": 104, "–∫–∞—á–∫–∞": 405, "–≥—É—Å–∞–∫": 412, "–∫—Ä–æ–ª–∏–∫": 156,
    "–ø–µ—á—ñ–Ω–∫–∞": 135, "—Å–µ—Ä—Ü–µ": 87, "–Ω–∏—Ä–∫–∏": 66, "–∫–æ–≤–±–∞—Å–∞": 301, "—Å–æ—Å–∏—Å–∫–∏": 266,
    "—à–∏–Ω–∫–∞": 270, "–±–µ–∫–æ–Ω": 541,
    
    # üêü –†–∏–±–∞ —Ç–∞ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏
    "—Ä–∏–±–∞": 206, "–ª–æ—Å–æ—Å—å": 208, "—Ç—É–Ω–µ—Ü—å": 296, "—Å–∫—É–º–±—Ä—ñ—è": 305, "—Å–µ–ª–µ–¥–∫–∞": 262,
    "—â—É–∫–∞": 84, "—Å—É–¥–∞–∫": 84, "–∫–æ—Ä–æ–ø": 112, "–º–∏–Ω—Ç–∞–π": 72, "—Ö–µ–∫": 86,
    "—Ç—Ä–µ—Å–∫–∞": 78, "–∫–∞–º–±–∞–ª–∞": 83, "–∫—Ä–µ–≤–µ—Ç–∫–∏": 95, "–∫—Ä–∞–±–∏": 96, "–∫–∞–ª—å–º–∞—Ä–∏": 110,
    "–º—ñ–¥—ñ—ó": 77, "—ñ–∫—Ä–∞": 263,
    
    # ü•ú –ì–æ—Ä—ñ—Ö–∏ —Ç–∞ –Ω–∞—Å—ñ–Ω–Ω—è
    "–≤–æ–ª–æ—Å—å–∫—ñ –≥–æ—Ä—ñ—Ö–∏": 654, "–º–∏–≥–¥–∞–ª—å": 575, "—Ñ—É–Ω–¥—É–∫": 628, "–∞—Ä–∞—Ö—ñ—Å": 567,
    "–∫–µ–¥—Ä–æ–≤—ñ –≥–æ—Ä—ñ—Ö–∏": 673, "–∫–µ—à—å—é": 553, "—Ñ—ñ—Å—Ç–∞—à–∫–∏": 556,
    "–Ω–∞—Å—ñ–Ω–Ω—è —Å–æ–Ω—è—à–Ω–∏–∫–∞": 578, "–Ω–∞—Å—ñ–Ω–Ω—è –≥–∞—Ä–±—É–∑–∞": 559, "–∫—É–Ω–∂—É—Ç": 565,
    
    # ü´ò –ë–æ–±–æ–≤—ñ
    "–≥–æ—Ä–æ—Ö": 298, "–∫–≤–∞—Å–æ–ª—è –±—ñ–ª–∞": 102, "–∫–≤–∞—Å–æ–ª—è —á–µ—Ä–≤–æ–Ω–∞": 93,
    "—Å–æ—á–µ–≤–∏—Ü—è": 295, "–Ω—É—Ç": 364, "—Å–æ—è": 381,
    
    # üçØ –°–æ–ª–æ–¥–æ—â—ñ
    "—Ü—É–∫–æ—Ä": 387, "–º–µ–¥": 329, "–≤–∞—Ä–µ–Ω–Ω—è": 263, "–¥–∂–µ–º": 263, "—à–æ–∫–æ–ª–∞–¥": 546,
    "—à–æ–∫–æ–ª–∞–¥ –º–æ–ª–æ—á–Ω–∏–π": 534, "—à–æ–∫–æ–ª–∞–¥ —á–æ—Ä–Ω–∏–π": 539, "—Ü—É–∫–µ—Ä–∫–∏": 453,
    "–º–∞—Ä–º–µ–ª–∞–¥": 321, "–∑–µ—Ñ—ñ—Ä": 326, "—Ö–∞–ª–≤–∞": 516,
    
    # üßÇ –û–ª—ñ—ó —Ç–∞ –∂–∏—Ä–∏
    "–æ–ª—ñ—è —Å–æ–Ω—è—à–Ω–∏–∫–æ–≤–∞": 899, "–æ–ª—ñ—è –æ–ª–∏–≤–∫–æ–≤–∞": 884, "–º–∞—Ä–≥–∞—Ä–∏–Ω": 719, "—Å–∞–ª–æ": 797,
    
    # ü•§ –ù–∞–ø–æ—ó –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ñ
    "—á–∞–π": 0, "–∫–∞–≤–∞": 2, "—Å—ñ–∫ —è–±–ª—É—á–Ω–∏–π": 46, "—Å—ñ–∫ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤–∏–π": 36,
    "—Å—ñ–∫ —Ç–æ–º–∞—Ç–Ω–∏–π": 21, "–∫–æ–º–ø–æ—Ç": 85, "–º–æ—Ä—Å": 41, "–∫–≤–∞—Å": 27,
    "–∫–æ–ª–∞": 42, "–ø–µ–ø—Å—ñ": 41, "—Å–ø—Ä–∞–π—Ç": 37, "–µ–Ω–µ—Ä–≥–µ—Ç–∏–∫": 45, "–≤–æ–¥–∞": 0,
    
    # üç∫ –ê–ª–∫–æ–≥–æ–ª—å–Ω—ñ –Ω–∞–ø–æ—ó
    "–ø–∏–≤–æ —Å–≤—ñ—Ç–ª–µ": 43, "–ø–∏–≤–æ —Ç–µ–º–Ω–µ": 48, "–≤–∏–Ω–æ —á–µ—Ä–≤–æ–Ω–µ": 68, "–≤–∏–Ω–æ –±—ñ–ª–µ": 66,
    "—à–∞–º–ø–∞–Ω—Å—å–∫–µ": 88, "–≥–æ—Ä—ñ–ª–∫–∞": 235, "–∫–æ–Ω—å—è–∫": 239, "–≤—ñ—Å–∫—ñ": 250, "—Ä–æ–º": 220,
    "–¥–∂–∏–Ω": 263, "—Ç–µ–∫—ñ–ª–∞": 231, "–ª—ñ–∫–µ—Ä": 327, "–º–∞—Ä—Ç—ñ–Ω—ñ": 140, "–≥–ª—ñ–Ω—Ç–≤–µ–π–Ω": 132,
    
    # üçø –°–Ω–µ–∫–∏ —Ç–∞ –∑–∞–∫—É—Å–∫–∏
    "—á—ñ–ø—Å–∏ –∫–∞—Ä—Ç–æ–ø–ª—è–Ω—ñ": 536, "—á—ñ–ø—Å–∏ –∫—É–∫—É—Ä—É–¥–∑—è–Ω—ñ": 498, "–ø–æ–ø–∫–æ—Ä–Ω": 387,
    "–∫—Ä–µ–∫–µ—Ä–∏": 440, "—Å—É—Ö–∞—Ä–∏–∫–∏": 331, "–±—Ä–µ—Ü–µ–ª—ñ": 380, "–≥–æ—Ä—ñ—à–∫–∏ —Å–æ–ª–æ–Ω—ñ": 607,
    "–ø—ñ—Ü—Ü–∞": 266, "–±—É—Ä–≥–µ—Ä": 295, "—Ö–æ—Ç-–¥–æ–≥": 290, "–∫–∞—Ä—Ç–æ–ø–ª—è —Ñ—Ä—ñ": 365,
    "–ø–æ–Ω—á–∏–∫–∏": 452, "–≤–∞—Ñ–ª—ñ": 305, "—Ç—ñ—Å—Ç–µ—á–∫–∞": 544, "–Ω–∞—á–æ—Å": 346,
    
    # üßÄ –î–µ–ª—ñ–∫–∞—Ç–µ—Å–∏
    "–º–æ—Ü–∞—Ä–µ–ª–∞": 280, "–ø–∞—Ä–º–µ–∑–∞–Ω": 431, "—Ñ–µ—Ç–∞": 264, "—Å–∞–ª—è–º—ñ": 407,
    "–ø—Ä–æ—à—É—Ç—Ç–æ": 335, "–æ–ª–∏–≤–∫–∏": 166, "–º–∞—Å–ª–∏–Ω–∏": 361, "—ñ–∫—Ä–∞ —á–µ—Ä–≤–æ–Ω–∞": 263,
    
    # üåø –ó–µ–ª–µ–Ω—å —Ç–∞ —Å–ø–µ—Ü—ñ—ó
    "–ø–µ—Ç—Ä—É—à–∫–∞": 36, "–∫—Ä—ñ–ø": 38, "–∑–µ–ª–µ–Ω–∞ —Ü–∏–±—É–ª—è": 19, "–±–∞–∑–∏–ª—ñ–∫": 27,
    
    # üçÑ –ì—Ä–∏–±–∏
    "–≥—Ä–∏–±–∏ –±—ñ–ª—ñ": 22, "—à–∞–º–ø—ñ–Ω—å–π–æ–Ω–∏": 27, "–ª–∏—Å–∏—á–∫–∏": 38, "–æ–ø–µ–Ω—å–∫–∏": 17
}

def load_users():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
    global users_db
    if os.path.exists('users.json'):
        try:
            with open('users.json', 'r', encoding='utf-8') as f:
                users_db = json.load(f)
        except:
            users_db = {}

def save_users():
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ñ–∞–π–ª"""
    try:
        with open('users.json', 'w', encoding='utf-8') as f:
            json.dump(users_db, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"Error saving users: {e}")

def calculate_bmr(gender, age, height, weight):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª—ñ–∑–º—É –∑–∞ —Ñ–æ—Ä–º—É–ª–æ—é –•–∞—Ä—Ä—ñ—Å–∞-–ë–µ–Ω–µ–¥–∏–∫—Ç–∞"""
    if gender.lower() == '—á–æ–ª–æ–≤—ñ–∫':
        bmr = 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)
    else:
        bmr = 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)
    return round(bmr)

def calculate_daily_calories(bmr, activity_level):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–µ–Ω–Ω–æ—ó –Ω–æ—Ä–º–∏ –∫–∞–ª–æ—Ä—ñ–π"""
    activity_multipliers = {
        '–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞': 1.2,
        '–ª–µ–≥–∫–∞': 1.375,
        '–ø–æ–º—ñ—Ä–Ω–∞': 1.55,
        '–∞–∫—Ç–∏–≤–Ω–∞': 1.725,
        '–¥—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞': 1.9
    }
    return round(bmr * activity_multipliers.get(activity_level, 1.2))

def adjust_calories_for_goal(daily_calories, goal):
    """–ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–µ—Ç–∏"""
    if goal == '—Å—Ö—É–¥–Ω—É—Ç–∏':
        return daily_calories - 500
    elif goal == '–Ω–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É':
        return daily_calories + 500
    else:
        return daily_calories

@dp.message(CommandStart())
async def start_handler(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = str(message.from_user.id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
        [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—É", callback_data="calculate_food")],
        [InlineKeyboardButton(text="üìà –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="my_profile")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ])
    
    await message.answer(
        f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –¥—ñ—î—Ç–∏! ü•ó\n\n"
        "–©–æ —Ç–∏ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "create_profile")
async def create_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë® –ß–æ–ª–æ–≤—ñ–∫", callback_data="gender_male")],
        [InlineKeyboardButton(text="üë© –ñ—ñ–Ω–∫–∞", callback_data="gender_female")]
    ])
    
    await callback.message.edit_text(
        "–î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å! üìù\n\n"
        "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å:",
        reply_markup=keyboard
    )
    await state.set_state(UserProfile.waiting_for_gender)

@dp.callback_query(F.data.in_(["gender_male", "gender_female"]))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å—Ç–∞—Ç—ñ"""
    gender = "—á–æ–ª–æ–≤—ñ–∫" if callback.data == "gender_male" else "–∂—ñ–Ω–∫–∞"
    await state.update_data(gender=gender)
    
    await callback.message.edit_text(
        f"–°—Ç–∞—Ç—å: {gender} ‚úÖ\n\n"
        "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫ (–≤ —Ä–æ–∫–∞—Ö):"
    )
    await state.set_state(UserProfile.waiting_for_age)

@dp.message(UserProfile.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–∫—É"""
    try:
        age = int(message.text)
        if age < 10 or age > 120:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (10-120 —Ä–æ–∫—ñ–≤)")
            return
        
        await state.update_data(age=age)
        await message.answer(f"–í—ñ–∫: {age} —Ä–æ–∫—ñ–≤ ‚úÖ\n\n–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑—Ä—ñ—Å—Ç (–≤ —Å–º):")
        await state.set_state(UserProfile.waiting_for_height)
        
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ —á–∏—Å–ª–æ–º")

@dp.message(UserProfile.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∑—Ä–æ—Å—Ç—É"""
    try:
        height = int(message.text)
        if height < 100 or height > 250:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑—Ä—ñ—Å—Ç (100-250 —Å–º)")
            return
        
        await state.update_data(height=height)
        await message.answer(f"–ó—Ä—ñ—Å—Ç: {height} —Å–º ‚úÖ\n\n–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É (–≤ –∫–≥):")
        await state.set_state(UserProfile.waiting_for_weight)
        
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑—Ä—ñ—Å—Ç —á–∏—Å–ª–æ–º")

@dp.message(UserProfile.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∞–≥–∏"""
    try:
        weight = float(message.text)
        if weight < 30 or weight > 300:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –≤–∞–≥—É (30-300 –∫–≥)")
            return
        
        await state.update_data(weight=weight)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõãÔ∏è –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="activity_minimal")],
            [InlineKeyboardButton(text="üö∂ –õ–µ–≥–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="activity_light")],
            [InlineKeyboardButton(text="üèÉ –ü–æ–º—ñ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="activity_moderate")],
            [InlineKeyboardButton(text="üí™ –ê–∫—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è", callback_data="activity_active")],
            [InlineKeyboardButton(text="üèãÔ∏è –î—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π", callback_data="activity_very_active")]
        ])
        
        await message.answer(
            f"–í–∞–≥–∞: {weight} –∫–≥ ‚úÖ\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:",
            reply_markup=keyboard
        )
        await state.set_state(UserProfile.waiting_for_activity)
        
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É —á–∏—Å–ª–æ–º")

@dp.callback_query(F.data.startswith("activity_"))
async def process_activity(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ä—ñ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    activity_map = {
        "activity_minimal": "–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞",
        "activity_light": "–ª–µ–≥–∫–∞",
        "activity_moderate": "–ø–æ–º—ñ—Ä–Ω–∞",
        "activity_active": "–∞–∫—Ç–∏–≤–Ω–∞",
        "activity_very_active": "–¥—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞"
    }
    
    activity = activity_map[callback.data]
    await state.update_data(activity=activity)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨áÔ∏è –°—Ö—É–¥–Ω—É—Ç–∏", callback_data="goal_lose")],
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–∞–≥—É", callback_data="goal_maintain")],
        [InlineKeyboardButton(text="‚¨ÜÔ∏è –ù–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É", callback_data="goal_gain")]
    ])
    
    await callback.message.edit_text(
        f"–†—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {activity} ‚úÖ\n\n"
        "–Ø–∫–∞ –≤–∞—à–∞ –º–µ—Ç–∞?",
        reply_markup=keyboard
    )
    await state.set_state(UserProfile.waiting_for_goal)

@dp.callback_query(F.data.startswith("goal_"))
async def process_goal(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    goal_map = {
        "goal_lose": "—Å—Ö—É–¥–Ω—É—Ç–∏",
        "goal_maintain": "–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–∞–≥—É",
        "goal_gain": "–Ω–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É"
    }
    
    goal = goal_map[callback.data]
    await state.update_data(goal=goal)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
    data = await state.get_data()
    user_id = str(callback.from_user.id)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–∞–ª–æ—Ä—ñ—ó
    bmr = calculate_bmr(data['gender'], data['age'], data['height'], data['weight'])
    daily_calories = calculate_daily_calories(bmr, data['activity'])
    target_calories = adjust_calories_for_goal(daily_calories, goal)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    users_db[user_id] = {
        **data,
        'bmr': bmr,
        'daily_calories': daily_calories,
        'target_calories': target_calories,
        'created_at': datetime.now().isoformat()
    }
    save_users()
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = f"""
‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!

üë§ –í–∞—à—ñ –¥–∞–Ω—ñ:
‚Ä¢ –°—Ç–∞—Ç—å: {data['gender']}
‚Ä¢ –í—ñ–∫: {data['age']} —Ä–æ–∫—ñ–≤
‚Ä¢ –ó—Ä—ñ—Å—Ç: {data['height']} —Å–º
‚Ä¢ –í–∞–≥–∞: {data['weight']} –∫–≥
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {data['activity']}
‚Ä¢ –ú–µ—Ç–∞: {goal}

üìä –í–∞—à—ñ –∫–∞–ª–æ—Ä—ñ—ó:
‚Ä¢ –ë–∞–∑–æ–≤–∏–π –º–µ—Ç–∞–±–æ–ª—ñ–∑–º: {bmr} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –î–µ–Ω–Ω–∞ –Ω–æ—Ä–º–∞: {daily_calories} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è –º–µ—Ç–∏: {target_calories} –∫–∫–∞–ª/–¥–µ–Ω—å

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
‚Ä¢ –ü–∏–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤–æ–¥–∏ (30-35 –º–ª –Ω–∞ –∫–≥ –≤–∞–≥–∏)
‚Ä¢ –á–∂—Ç–µ 4-5 —Ä–∞–∑—ñ–≤ –Ω–∞ –¥–µ–Ω—å –Ω–µ–≤–µ–ª–∏–∫–∏–º–∏ –ø–æ—Ä—Ü—ñ—è–º–∏
‚Ä¢ –í–∫–ª—é—á–∞–π—Ç–µ –±—ñ–ª–∫–∏ –≤ –∫–æ–∂–µ–Ω –ø—Ä–∏–π–æ–º —ó–∂—ñ
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—É", callback_data="calculate_food")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(result_text, reply_markup=keyboard)
    await state.clear()

@dp.callback_query(F.data == "calculate_food")
async def calculate_food_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π –ø—Ä–æ–¥—É–∫—Ç—É"""
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    categories = {
        "üçé –§—Ä—É–∫—Ç–∏": ["—è–±–ª—É–∫–æ", "–±–∞–Ω–∞–Ω", "–∞–ø–µ–ª—å—Å–∏–Ω", "–≥—Ä—É—à–∞", "–≤–∏–Ω–æ–≥—Ä–∞–¥"],
        "ü•ï –û–≤–æ—á—ñ": ["–ø–æ–º—ñ–¥–æ—Ä", "–æ–≥—ñ—Ä–æ–∫", "–º–æ—Ä–∫–≤–∞", "–∫–∞–ø—É—Å—Ç–∞", "–∫–∞—Ä—Ç–æ–ø–ª—è"],
        "üçñ –ú'—è—Å–æ": ["–∫—É—Ä–∏—Ü—è", "—è–ª–æ–≤–∏—á–∏–Ω–∞", "—Å–≤–∏–Ω–∏–Ω–∞", "—ñ–Ω–¥–∏—á–∫–∞"],
        "üêü –†–∏–±–∞": ["–ª–æ—Å–æ—Å—å", "—Ç—É–Ω–µ—Ü—å", "—Å–∫—É–º–±—Ä—ñ—è", "—Ç—Ä–µ—Å–∫–∞"],
        "ü•õ –ú–æ–ª–æ—á–Ω—ñ": ["–º–æ–ª–æ–∫–æ", "—Å–∏—Ä", "–π–æ–≥—É—Ä—Ç", "—Ç–≤–æ—Ä–æ–≥", "–∫–µ—Ñ—ñ—Ä"],
        "üåæ –ö—Ä—É–ø–∏": ["—Ä–∏—Å", "–≥—Ä–µ—á–∫–∞", "–≤—ñ–≤—Å—è–Ω–∫–∞", "–∫–∏–Ω–æ–∞"],
        "üçø –°–Ω–µ–∫–∏": ["—á—ñ–ø—Å–∏ –∫–∞—Ä—Ç–æ–ø–ª—è–Ω—ñ", "–ø–æ–ø–∫–æ—Ä–Ω", "–∫—Ä–µ–∫–µ—Ä–∏", "–ø—ñ—Ü—Ü–∞"],
        "üç∫ –ê–ª–∫–æ–≥–æ–ª—å": ["–ø–∏–≤–æ —Å–≤—ñ—Ç–ª–µ", "–≤–∏–Ω–æ —á–µ—Ä–≤–æ–Ω–µ", "–≥–æ—Ä—ñ–ª–∫–∞", "–∫–æ–Ω—å—è–∫"]
    }
    
    food_list = ""
    for category, foods in categories.items():
        food_list += f"\n{category}:\n"
        food_list += "\n".join([f"‚Ä¢ {food}" for food in foods])
        food_list += "\n"
    
    await callback.message.edit_text(
        f"üçé –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–∞–ª–æ—Ä—ñ–π –ø—Ä–æ–¥—É–∫—Ç—É\n\n"
        f"–£ –±–∞–∑—ñ —î {len(food_db)} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤! –û—Å—å –¥–µ—è–∫—ñ –∑ –Ω–∏—Ö:\n"
        f"{food_list}\n"
        f"...—Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–∏—Ö! ü•úüçØüçÑ\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É:"
    )
    await state.set_state(FoodCalories.waiting_for_food)

@dp.message(FoodCalories.waiting_for_food)
async def process_food_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ –ø—Ä–æ–¥—É–∫—Ç—É"""
    food_name = message.text.lower().strip()
    
    if food_name in food_db:
        await state.update_data(food_name=food_name, calories_per_100g=food_db[food_name])
        await message.answer(
            f"–ü—Ä–æ–¥—É–∫—Ç: {food_name} ‚úÖ\n"
            f"–ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å: {food_db[food_name]} –∫–∫–∞–ª –Ω–∞ 100–≥\n\n"
            f"–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É –ø—Ä–æ–¥—É–∫—Ç—É –≤ –≥—Ä–∞–º–∞—Ö:"
        )
        await state.set_state(FoodCalories.waiting_for_weight_food)
    else:
        similar_foods = [food for food in food_db.keys() if food_name in food or food in food_name]
        if similar_foods:
            suggestions = "\n".join([f"‚Ä¢ {food}" for food in similar_foods[:5]])
            await message.answer(
                f"–ü—Ä–æ–¥—É–∫—Ç '{food_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî\n\n"
                f"–ú–æ–∂–ª–∏–≤–æ, –≤–∏ –º–∞–ª–∏ –Ω–∞ —É–≤–∞–∑—ñ:\n{suggestions}\n\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
            )
        else:
            await message.answer(
                f"–ü—Ä–æ–¥—É–∫—Ç '{food_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî\n\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –ø—Ä–æ–¥—É–∫—Ç –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é"
            )

@dp.message(FoodCalories.waiting_for_weight_food)
async def process_food_weight(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∞–≥–∏ –ø—Ä–æ–¥—É–∫—Ç—É"""
    try:
        weight = float(message.text)
        if weight <= 0:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ")
            return
        
        data = await state.get_data()
        food_name = data['food_name']
        calories_per_100g = data['calories_per_100g']
        
        total_calories = round((calories_per_100g * weight) / 100, 1)
        
        result_text = f"""
üçé –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:

üì¶ –ü—Ä–æ–¥—É–∫—Ç: {food_name}
‚öñÔ∏è –í–∞–≥–∞: {weight}–≥
üî• –ö–∞–ª–æ—Ä—ñ—ó: {total_calories} –∫–∫–∞–ª

üìä –î–µ—Ç–∞–ª—ñ:
‚Ä¢ –ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å –Ω–∞ 100–≥: {calories_per_100g} –∫–∫–∞–ª
‚Ä¢ –í–∞—à–∞ –ø–æ—Ä—Ü—ñ—è: {weight}–≥
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å: {total_calories} –∫–∫–∞–ª
        """
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ % –≤—ñ–¥ –¥–µ–Ω–Ω–æ—ó –Ω–æ—Ä–º–∏, —è–∫—â–æ —î –ø—Ä–æ—Ñ—ñ–ª—å
        user_id = str(message.from_user.id)
        if user_id in users_db:
            target_calories = users_db[user_id]['target_calories']
            percentage = round((total_calories / target_calories) * 100, 1)
            result_text += f"\nüí° –¶–µ {percentage}% –≤—ñ–¥ –≤–∞—à–æ—ó –¥–µ–Ω–Ω–æ—ó –Ω–æ—Ä–º–∏ ({target_calories} –∫–∫–∞–ª)"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π –ø—Ä–æ–¥—É–∫—Ç", callback_data="calculate_food")],
            [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await message.answer(result_text, reply_markup=keyboard)
        await state.clear()
        
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 150)")

@dp.callback_query(F.data == "my_profile")
async def show_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = str(callback.from_user.id)
    
    if user_id not in users_db:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")]
        ])
        await callback.message.edit_text(
            "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –ø—Ä–æ—Ñ—ñ–ª—é üòî\n\n"
            "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π!",
            reply_markup=keyboard
        )
        return
    
    user = users_db[user_id]
    profile_text = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:

üìã –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ:
‚Ä¢ –°—Ç–∞—Ç—å: {user['gender']}
‚Ä¢ –í—ñ–∫: {user['age']} —Ä–æ–∫—ñ–≤
‚Ä¢ –ó—Ä—ñ—Å—Ç: {user['height']} —Å–º
‚Ä¢ –í–∞–≥–∞: {user['weight']} –∫–≥
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user['activity']}
‚Ä¢ –ú–µ—Ç–∞: {user['goal']}

üìä –ö–∞–ª–æ—Ä—ñ—ó:
‚Ä¢ –ë–∞–∑–æ–≤–∏–π –º–µ—Ç–∞–±–æ–ª—ñ–∑–º: {user['bmr']} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –î–µ–Ω–Ω–∞ –Ω–æ—Ä–º–∞: {user['daily_calories']} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: {user['target_calories']} –∫–∫–∞–ª/–¥–µ–Ω—å

üí° –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏:
‚Ä¢ –ë—ñ–ª–∫–∏: {round(user['target_calories'] * 0.3 / 4)}–≥ –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –ñ–∏—Ä–∏: {round(user['target_calories'] * 0.25 / 9)}–≥ –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –í—É–≥–ª–µ–≤–æ–¥–∏: {round(user['target_calories'] * 0.45 / 4)}–≥ –Ω–∞ –¥–µ–Ω—å
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
        [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó", callback_data="calculate_food")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(profile_text, reply_markup=keyboard)

@dp.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–æ–≤—ñ–¥–∫–∏"""
    help_text = """
‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É

ü§ñ –©–æ —è –≤–º—ñ—é:
‚Ä¢ –†–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –±–∞–∑–æ–≤–∏–π –º–µ—Ç–∞–±–æ–ª—ñ–∑–º (BMR)
‚Ä¢ –í–∏–∑–Ω–∞—á–∞—Ç–∏ –¥–µ–Ω–Ω—É –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä—ñ–π
‚Ä¢ –í—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –º–µ—Ç—É
‚Ä¢ –†–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å
‚Ä¢ –î–∞–≤–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

üìä –§–æ—Ä–º—É–ª–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:
‚Ä¢ BMR (—á–æ–ª–æ–≤—ñ–∫–∏): 88.362 + (13.397 √ó –≤–∞–≥–∞) + (4.799 √ó –∑—Ä—ñ—Å—Ç) - (5.677 √ó –≤—ñ–∫)
‚Ä¢ BMR (–∂—ñ–Ω–∫–∏): 447.593 + (9.247 √ó –≤–∞–≥–∞) + (3.098 √ó –∑—Ä—ñ—Å—Ç) - (4.330 √ó –≤—ñ–∫)

üéØ –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –º–µ—Ç–∏:
‚Ä¢ –°—Ö—É–¥–Ω—É—Ç–∏: -500 –∫–∫–∞–ª –≤—ñ–¥ –Ω–æ—Ä–º–∏
‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏: –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä—ñ–π
‚Ä¢ –ù–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É: +500 –∫–∫–∞–ª –¥–æ –Ω–æ—Ä–º–∏

üì± –ö–æ–º–∞–Ω–¥–∏:
/start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é

üåü –ë–æ—Ç –ø—Ä–∞—Ü—é—î 24/7 –≤ —Ö–º–∞—Ä—ñ!
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(help_text, reply_markup=keyboard)

@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
        [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—É", callback_data="calculate_food")],
        [InlineKeyboardButton(text="üìà –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="my_profile")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ])
    
    await callback.message.edit_text(
        f"–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†\n\n"
        "–û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏:",
        reply_markup=keyboard
    )

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    load_users()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! üöÄ")
    print("–ü—Ä–∞—Ü—é—î –≤ —Ö–º–∞—Ä—ñ 24/7 ‚òÅÔ∏è")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
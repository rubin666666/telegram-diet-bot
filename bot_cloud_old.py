import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import json
import os
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ—Ç—Ä–∏–º–∞–π—Ç–µ –≤—ñ–¥ @BotFather)
BOT_TOKEN = os.getenv("BOT_TOKEN", "8458486366:AAH4DnunseoCOdyyRS7fueLKeW4ELSZc3QA")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°—Ç–∞–Ω–∏ –¥–ª—è FSM
class UserProfile(StatesGroup):
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_height = State()
    waiting_for_weight = State()
    waiting_for_activity = State()
    waiting_for_goal = State()

class FoodCalories(StatesGroup):
    waiting_for_food = State()
    waiting_for_weight_food = State()

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ë–î)
users_db = {}

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ (–∫–∞–ª–æ—Ä—ñ—ó –Ω–∞ 100–≥) - –†–æ–∑—à–∏—Ä–µ–Ω–∞ –±–∞–∑–∞ –¥–ª—è —Ö–º–∞—Ä–∏
food_db = {
    # üçé –§—Ä—É–∫—Ç–∏ —Ç–∞ —è–≥–æ–¥–∏
    "—è–±–ª—É–∫–æ": 52, "–±–∞–Ω–∞–Ω": 89, "–∞–ø–µ–ª—å—Å–∏–Ω": 47, "–≥—Ä—É—à–∞": 57, "–≤–∏–Ω–æ–≥—Ä–∞–¥": 65,
    "–ø–æ–ª—É–Ω–∏—Ü—è": 32, "–∫—ñ–≤—ñ": 61, "–∞–Ω–∞–Ω–∞—Å": 50, "–º–∞–Ω–≥–æ": 60, "–ø–µ—Ä—Å–∏–∫": 39,
    
    # ü•ï –û–≤–æ—á—ñ
    "–ø–æ–º—ñ–¥–æ—Ä": 18, "–æ–≥—ñ—Ä–æ–∫": 16, "–º–æ—Ä–∫–≤–∞": 41, "–∫–∞—Ä—Ç–æ–ø–ª—è": 77, "–∫–∞–ø—É—Å—Ç–∞": 25,
    "—Ü–∏–±—É–ª—è": 40, "–±—É—Ä—è–∫": 43, "–∫–∞–±–∞—á–æ–∫": 24, "–±—Ä–æ–∫–æ–ª—ñ": 34, "–ø–µ—Ä–µ—Ü—å": 27,
    
    # üåæ –ö—Ä—É–ø–∏
    "—Ä–∏—Å": 130, "–≥—Ä–µ—á–∫–∞": 343, "–≤—ñ–≤—Å—è–Ω–∫–∞": 389, "–ø—à–æ–Ω–æ": 348, "–∫–∏–Ω–æ–∞": 368,
    
    # üçñ –ú'—è—Å–æ
    "–∫—É—Ä–∏—Ü—è": 165, "—è–ª–æ–≤–∏—á–∏–Ω–∞": 187, "—Å–≤–∏–Ω–∏–Ω–∞": 259, "—ñ–Ω–¥–∏—á–∫–∞": 104,
    
    # üêü –†–∏–±–∞
    "–ª–æ—Å–æ—Å—å": 208, "—Ç—É–Ω–µ—Ü—å": 296, "–º–∏–Ω—Ç–∞–π": 72, "—Ç—Ä–µ—Å–∫–∞": 78,
    
    # ü•õ –ú–æ–ª–æ—á–Ω—ñ
    "–º–æ–ª–æ–∫–æ": 60, "–∫–µ—Ñ—ñ—Ä": 56, "–π–æ–≥—É—Ä—Ç": 59, "—Ç–≤–æ—Ä–æ–≥": 101, "—Å–∏—Ä": 402,
    
    # ü•ö –Ø–π—Ü—è
    "—è–π—Ü–µ": 155,
    
    # üçû –•–ª—ñ–±
    "—Ö–ª—ñ–±": 265, "—Ö–ª—ñ–± —á–æ—Ä–Ω–∏–π": 214,
    
    # ü•ú –ì–æ—Ä—ñ—Ö–∏
    "–≤–æ–ª–æ—Å—å–∫—ñ –≥–æ—Ä—ñ—Ö–∏": 654, "–º–∏–≥–¥–∞–ª—å": 575, "–∞—Ä–∞—Ö—ñ—Å": 567,
    
    # üçØ –°–æ–ª–æ–¥–æ—â—ñ
    "–º–µ–¥": 329, "—Ü—É–∫–æ—Ä": 387, "—à–æ–∫–æ–ª–∞–¥": 546,
    
    # üßÇ –û–ª—ñ—ó
    "–æ–ª—ñ—è —Å–æ–Ω—è—à–Ω–∏–∫–æ–≤–∞": 899, "–æ–ª—ñ—è –æ–ª–∏–≤–∫–æ–≤–∞": 884,
    
    # ü•§ –ù–∞–ø–æ—ó
    "—á–∞–π": 0, "–∫–∞–≤–∞": 2, "–≤–æ–¥–∞": 0, "—Å—ñ–∫ —è–±–ª—É—á–Ω–∏–π": 46,
    
    # üç∫ –ê–ª–∫–æ–≥–æ–ª—å
    "–ø–∏–≤–æ —Å–≤—ñ—Ç–ª–µ": 43, "–≤–∏–Ω–æ —á–µ—Ä–≤–æ–Ω–µ": 68, "–≥–æ—Ä—ñ–ª–∫–∞": 235, "–∫–æ–Ω—å—è–∫": 239,
    
    # üçø –°–Ω–µ–∫–∏
    "—á—ñ–ø—Å–∏ –∫–∞—Ä—Ç–æ–ø–ª—è–Ω—ñ": 536, "–ø–æ–ø–∫–æ—Ä–Ω": 387, "–ø—ñ—Ü—Ü–∞": 266, "–±—É—Ä–≥–µ—Ä": 295,
    
    # üçÑ –ì—Ä–∏–±–∏
    "–≥—Ä–∏–±–∏ –±—ñ–ª—ñ": 22, "—à–∞–º–ø—ñ–Ω—å–π–æ–Ω–∏": 27
}

def load_users():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
    global users_db
    if os.path.exists('users.json'):
        try:
            with open('users.json', 'r', encoding='utf-8') as f:
                users_db = json.load(f)
        except Exception as e:
            logging.error(f"Error loading users: {e}")
            users_db = {}

def save_users():
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ñ–∞–π–ª"""
    try:
        with open('users.json', 'w', encoding='utf-8') as f:
            json.dump(users_db, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"Error saving users: {e}")

def calculate_bmr(gender, age, height, weight):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª—ñ–∑–º—É –∑–∞ —Ñ–æ—Ä–º—É–ª–æ—é –•–∞—Ä—Ä—ñ—Å–∞-–ë–µ–Ω–µ–¥–∏–∫—Ç–∞"""
    if gender.lower() == '—á–æ–ª–æ–≤—ñ–∫':
        bmr = 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)
    else:
        bmr = 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)
    return round(bmr)

def calculate_daily_calories(bmr, activity_level):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–µ–Ω–Ω–æ—ó –Ω–æ—Ä–º–∏ –∫–∞–ª–æ—Ä—ñ–π"""
    activity_multipliers = {
        '–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞': 1.2,
        '–ª–µ–≥–∫–∞': 1.375,
        '–ø–æ–º—ñ—Ä–Ω–∞': 1.55,
        '–∞–∫—Ç–∏–≤–Ω–∞': 1.725,
        '–¥—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞': 1.9
    }
    return round(bmr * activity_multipliers.get(activity_level, 1.2))

def adjust_calories_for_goal(daily_calories, goal):
    """–ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–µ—Ç–∏"""
    if goal == '—Å—Ö—É–¥–Ω—É—Ç–∏':
        return daily_calories - 500
    elif goal == '–Ω–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É':
        return daily_calories + 500
    else:
        return daily_calories

def calculate_bmi(weight, height):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω–¥–µ–∫—Å—É –º–∞—Å–∏ —Ç—ñ–ª–∞ (–Ü–ú–¢)"""
    height_m = height / 100  # –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ —Å–º –≤ –º–µ—Ç—Ä–∏
    bmi = weight / (height_m ** 2)
    return round(bmi, 1)

def get_bmi_category(bmi):
    """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ü–ú–¢"""
    if bmi < 18.5:
        return "–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –≤–∞–≥–∞", "üîµ"
    elif 18.5 <= bmi < 25:
        return "–Ω–æ—Ä–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞", "üü¢"
    elif 25 <= bmi < 30:
        return "–Ω–∞–¥–ª–∏—à–∫–æ–≤–∞ –≤–∞–≥–∞", "üü°"
    else:
        return "–æ–∂–∏—Ä—ñ–Ω–Ω—è", "üî¥"

def calculate_water_intake(weight, activity_level):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ—Ä–º–∏ –≤–æ–¥–∏"""
    base_water = weight * 35  # 35 –º–ª –Ω–∞ –∫–≥ –≤–∞–≥–∏
    
    # –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    activity_multipliers = {
        '–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞': 1.0,
        '–ª–µ–≥–∫–∞': 1.1,
        '–ø–æ–º—ñ—Ä–Ω–∞': 1.2,
        '–∞–∫—Ç–∏–≤–Ω–∞': 1.3,
        '–¥—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞': 1.4
    }
    
    water_ml = base_water * activity_multipliers.get(activity_level, 1.0)
    return round(water_ml)

@dp.message(CommandStart())
async def start_handler(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = str(message.from_user.id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
        [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—É", callback_data="calculate_food")],
        [InlineKeyboardButton(text="üìà –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="my_profile")],
        [InlineKeyboardButton(text="üíß –ù–æ—Ä–º–∞ –≤–æ–¥–∏", callback_data="water_intake")],
        [InlineKeyboardButton(text="‚öñÔ∏è –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ü–ú–¢", callback_data="calculate_bmi")],
        [InlineKeyboardButton(text="üí° –©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏", callback_data="daily_tips")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ])
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è–º
    photo_url = "https://images.unsplash.com/photo-1490645935967-10de6ba17061?w=800&h=600&fit=crop"
    
    await message.answer_photo(
        photo=photo_url,
        caption=f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! üëã\n\n"
                "–Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –¥—ñ—î—Ç–∏! ü•ó\n\n"
                "üìä –†–æ–∑—Ä–∞—Ö–æ–≤—É—é BMR —Ç–∞ –¥–µ–Ω–Ω—É –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä—ñ–π\n"
                "üçé –ó–Ω–∞—é –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤\n"
                "üíß –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –Ω–æ—Ä–º—É –≤–æ–¥–∏\n"
                "‚öñÔ∏è –í–∏–∑–Ω–∞—á–∞—é –Ü–ú–¢\n"
                "üí° –î–∞—é —â–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏\n\n"
                "–©–æ —Ç–∏ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "create_profile")
async def create_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë® –ß–æ–ª–æ–≤—ñ–∫", callback_data="gender_male")],
        [InlineKeyboardButton(text="üë© –ñ—ñ–Ω–∫–∞", callback_data="gender_female")]
    ])
    
    await callback.message.edit_text(
        "–î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å! üìù\n\n"
        "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å:",
        reply_markup=keyboard
    )
    await state.set_state(UserProfile.waiting_for_gender)

@dp.callback_query(F.data.in_(["gender_male", "gender_female"]))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å—Ç–∞—Ç—ñ"""
    gender = "—á–æ–ª–æ–≤—ñ–∫" if callback.data == "gender_male" else "–∂—ñ–Ω–∫–∞"
    await state.update_data(gender=gender)
    
    await callback.message.edit_text(
        f"–°—Ç–∞—Ç—å: {gender} ‚úÖ\n\n"
        "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫ (–≤ —Ä–æ–∫–∞—Ö):"
    )
    await state.set_state(UserProfile.waiting_for_age)

@dp.message(UserProfile.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–∫—É"""
    try:
        age = int(message.text)
        if age < 10 or age > 120:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (10-120 —Ä–æ–∫—ñ–≤)")
            return
        
        await state.update_data(age=age)
        await message.answer(f"–í—ñ–∫: {age} —Ä–æ–∫—ñ–≤ ‚úÖ\n\n–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑—Ä—ñ—Å—Ç (–≤ —Å–º):")
        await state.set_state(UserProfile.waiting_for_height)
        
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ —á–∏—Å–ª–æ–º")

@dp.message(UserProfile.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∑—Ä–æ—Å—Ç—É"""
    try:
        height = int(message.text)
        if height < 100 or height > 250:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑—Ä—ñ—Å—Ç (100-250 —Å–º)")
            return
        
        await state.update_data(height=height)
        await message.answer(f"–ó—Ä—ñ—Å—Ç: {height} —Å–º ‚úÖ\n\n–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É (–≤ –∫–≥):")
        await state.set_state(UserProfile.waiting_for_weight)
        
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑—Ä—ñ—Å—Ç —á–∏—Å–ª–æ–º")

@dp.message(UserProfile.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∞–≥–∏"""
    try:
        weight = float(message.text)
        if weight < 30 or weight > 300:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –≤–∞–≥—É (30-300 –∫–≥)")
            return
        
        await state.update_data(weight=weight)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõãÔ∏è –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="activity_minimal")],
            [InlineKeyboardButton(text="üö∂ –õ–µ–≥–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="activity_light")],
            [InlineKeyboardButton(text="üèÉ –ü–æ–º—ñ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="activity_moderate")],
            [InlineKeyboardButton(text="üí™ –ê–∫—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è", callback_data="activity_active")],
            [InlineKeyboardButton(text="üèãÔ∏è –î—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π", callback_data="activity_very_active")]
        ])
        
        await message.answer(
            f"–í–∞–≥–∞: {weight} –∫–≥ ‚úÖ\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:",
            reply_markup=keyboard
        )
        await state.set_state(UserProfile.waiting_for_activity)
        
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É —á–∏—Å–ª–æ–º")

@dp.callback_query(F.data.startswith("activity_"))
async def process_activity(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ä—ñ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    activity_map = {
        "activity_minimal": "–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞",
        "activity_light": "–ª–µ–≥–∫–∞",
        "activity_moderate": "–ø–æ–º—ñ—Ä–Ω–∞",
        "activity_active": "–∞–∫—Ç–∏–≤–Ω–∞",
        "activity_very_active": "–¥—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞"
    }
    
    activity = activity_map[callback.data]
    await state.update_data(activity=activity)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨áÔ∏è –°—Ö—É–¥–Ω—É—Ç–∏", callback_data="goal_lose")],
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–∞–≥—É", callback_data="goal_maintain")],
        [InlineKeyboardButton(text="‚¨ÜÔ∏è –ù–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É", callback_data="goal_gain")]
    ])
    
    await callback.message.edit_text(
        f"–†—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {activity} ‚úÖ\n\n"
        "–Ø–∫–∞ –≤–∞—à–∞ –º–µ—Ç–∞?",
        reply_markup=keyboard
    )
    await state.set_state(UserProfile.waiting_for_goal)

@dp.callback_query(F.data.startswith("goal_"))
async def process_goal(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    goal_map = {
        "goal_lose": "—Å—Ö—É–¥–Ω—É—Ç–∏",
        "goal_maintain": "–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–∞–≥—É",
        "goal_gain": "–Ω–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É"
    }
    
    goal = goal_map[callback.data]
    await state.update_data(goal=goal)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
    data = await state.get_data()
    user_id = str(callback.from_user.id)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–∞–ª–æ—Ä—ñ—ó
    bmr = calculate_bmr(data['gender'], data['age'], data['height'], data['weight'])
    daily_calories = calculate_daily_calories(bmr, data['activity'])
    target_calories = adjust_calories_for_goal(daily_calories, goal)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    users_db[user_id] = {
        **data,
        'bmr': bmr,
        'daily_calories': daily_calories,
        'target_calories': target_calories,
        'created_at': datetime.now().isoformat()
    }
    save_users()
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = f"""
‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!

üë§ –í–∞—à—ñ –¥–∞–Ω—ñ:
‚Ä¢ –°—Ç–∞—Ç—å: {data['gender']}
‚Ä¢ –í—ñ–∫: {data['age']} —Ä–æ–∫—ñ–≤
‚Ä¢ –ó—Ä—ñ—Å—Ç: {data['height']} —Å–º
‚Ä¢ –í–∞–≥–∞: {data['weight']} –∫–≥
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {data['activity']}
‚Ä¢ –ú–µ—Ç–∞: {goal}

üìä –í–∞—à—ñ –∫–∞–ª–æ—Ä—ñ—ó:
‚Ä¢ –ë–∞–∑–æ–≤–∏–π –º–µ—Ç–∞–±–æ–ª—ñ–∑–º: {bmr} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –î–µ–Ω–Ω–∞ –Ω–æ—Ä–º–∞: {daily_calories} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è –º–µ—Ç–∏: {target_calories} –∫–∫–∞–ª/–¥–µ–Ω—å

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
‚Ä¢ –ü–∏–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤–æ–¥–∏ (30-35 –º–ª –Ω–∞ –∫–≥ –≤–∞–≥–∏)
‚Ä¢ –á–∂—Ç–µ 4-5 —Ä–∞–∑—ñ–≤ –Ω–∞ –¥–µ–Ω—å –Ω–µ–≤–µ–ª–∏–∫–∏–º–∏ –ø–æ—Ä—Ü—ñ—è–º–∏
‚Ä¢ –í–∫–ª—é—á–∞–π—Ç–µ –±—ñ–ª–∫–∏ –≤ –∫–æ–∂–µ–Ω –ø—Ä–∏–π–æ–º —ó–∂—ñ
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—É", callback_data="calculate_food")],
        [InlineKeyboardButton(text="üíß –ù–æ—Ä–º–∞ –≤–æ–¥–∏", callback_data="water_intake")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(result_text, reply_markup=keyboard)
    await state.clear()

@dp.callback_query(F.data == "calculate_food")
async def calculate_food_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π –ø—Ä–æ–¥—É–∫—Ç—É"""
    food_photo = "https://images.unsplash.com/photo-1498837167922-ddd27525d352?w=800&h=600&fit=crop"
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=food_photo,
        caption=f"üçé –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–∞–ª–æ—Ä—ñ–π –ø—Ä–æ–¥—É–∫—Ç—É\n\n"
                f"–£ –±–∞–∑—ñ —î –±–∞–≥–∞—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤!\n\n"
                f"–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É:"
    )
    await state.set_state(FoodCalories.waiting_for_food)

@dp.message(FoodCalories.waiting_for_food)
async def process_food_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ –ø—Ä–æ–¥—É–∫—Ç—É"""
    food_name = message.text.lower().strip()
    
    # –ü—Ä—è–º–∏–π –ø–æ—à—É–∫
    if food_name in food_db:
        await state.update_data(food_name=food_name, calories_per_100g=food_db[food_name])
        await message.answer(
            f"–ü—Ä–æ–¥—É–∫—Ç: {food_name} ‚úÖ\n"
            f"–ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å: {food_db[food_name]} –∫–∫–∞–ª –Ω–∞ 100–≥\n\n"
            f"–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É –ø—Ä–æ–¥—É–∫—Ç—É –≤ –≥—Ä–∞–º–∞—Ö:"
        )
        await state.set_state(FoodCalories.waiting_for_weight_food)
        return
    
    # –†–æ–∑—É–º–Ω–∏–π –ø–æ—à—É–∫
    similar_foods = []
    for food in food_db.keys():
        if food_name in food or food in food_name:
            similar_foods.append(food)
    
    if similar_foods:
        similar_foods = list(set(similar_foods))[:8]
        suggestions = "\n".join([f"‚Ä¢ {food} ({food_db[food]} –∫–∫–∞–ª)" for food in similar_foods])
        
        await message.answer(
            f"–ü—Ä–æ–¥—É–∫—Ç '{food_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî\n\n"
            f"üîç –ú–æ–∂–ª–∏–≤–æ, –≤–∏ –º–∞–ª–∏ –Ω–∞ —É–≤–∞–∑—ñ:\n{suggestions}\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
    else:
        await message.answer(
            f"–ü—Ä–æ–¥—É–∫—Ç '{food_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /start"
        )

@dp.message(FoodCalories.waiting_for_weight_food)
async def process_food_weight(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∞–≥–∏ –ø—Ä–æ–¥—É–∫—Ç—É"""
    try:
        weight = float(message.text)
        if weight <= 0:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ")
            return
        
        data = await state.get_data()
        food_name = data['food_name']
        calories_per_100g = data['calories_per_100g']
        
        total_calories = round((calories_per_100g * weight) / 100, 1)
        
        result_text = f"""
üçé –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:

üì¶ –ü—Ä–æ–¥—É–∫—Ç: {food_name}
‚öñÔ∏è –í–∞–≥–∞: {weight}–≥
üî• –ö–∞–ª–æ—Ä—ñ—ó: {total_calories} kk–∞–ª

üìä –î–µ—Ç–∞–ª—ñ:
‚Ä¢ –ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å –Ω–∞ 100–≥: {calories_per_100g} –∫–∫–∞–ª
‚Ä¢ –í–∞—à–∞ –ø–æ—Ä—Ü—ñ—è: {weight}–≥
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å: {total_calories} –∫–∫–∞–ª
        """
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ % –≤—ñ–¥ –¥–µ–Ω–Ω–æ—ó –Ω–æ—Ä–º–∏, —è–∫—â–æ —î –ø—Ä–æ—Ñ—ñ–ª—å
        user_id = str(message.from_user.id)
        if user_id in users_db:
            target_calories = users_db[user_id]['target_calories']
            percentage = round((total_calories / target_calories) * 100, 1)
            result_text += f"\nüí° –¶–µ {percentage}% –≤—ñ–¥ –≤–∞—à–æ—ó –¥–µ–Ω–Ω–æ—ó –Ω–æ—Ä–º–∏ ({target_calories} –∫–∫–∞–ª)"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π –ø—Ä–æ–¥—É–∫—Ç", callback_data="calculate_food")],
            [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        default_photo = "https://images.unsplash.com/photo-1490645935967-10de6ba17061?w=400&h=400&fit=crop"
        
        await message.answer_photo(
            photo=default_photo,
            caption=result_text,
            reply_markup=keyboard
        )
        await state.clear()
        
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 150)")

@dp.callback_query(F.data == "my_profile")
async def show_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = str(callback.from_user.id)
    
    if user_id not in users_db:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")]
        ])
        await callback.message.edit_text(
            "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –ø—Ä–æ—Ñ—ñ–ª—é üòî\n\n"
            "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π!",
            reply_markup=keyboard
        )
        return
    
    user = users_db[user_id]
    profile_text = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:

üìã –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ:
‚Ä¢ –°—Ç–∞—Ç—å: {user['gender']}
‚Ä¢ –í—ñ–∫: {user['age']} —Ä–æ–∫—ñ–≤
‚Ä¢ –ó—Ä—ñ—Å—Ç: {user['height']} —Å–º
‚Ä¢ –í–∞–≥–∞: {user['weight']} –∫–≥
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user['activity']}
‚Ä¢ –ú–µ—Ç–∞: {user['goal']}

üìä –ö–∞–ª–æ—Ä—ñ—ó:
‚Ä¢ –ë–∞–∑–æ–≤–∏–π –º–µ—Ç–∞–±–æ–ª—ñ–∑–º: {user['bmr']} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –î–µ–Ω–Ω–∞ –Ω–æ—Ä–º–∞: {user['daily_calories']} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: {user['target_calories']} –∫–∫–∞–ª/–¥–µ–Ω—å

üí° –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏:
‚Ä¢ –ë—ñ–ª–∫–∏: {round(user['target_calories'] * 0.3 / 4)}–≥ –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –ñ–∏—Ä–∏: {round(user['target_calories'] * 0.25 / 9)}–≥ –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –í—É–≥–ª–µ–≤–æ–¥–∏: {round(user['target_calories'] * 0.45 / 4)}–≥ –Ω–∞ –¥–µ–Ω—å
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
        [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó", callback_data="calculate_food")],
        [InlineKeyboardButton(text="üíß –ù–æ—Ä–º–∞ –≤–æ–¥–∏", callback_data="water_intake"), InlineKeyboardButton(text="‚öñÔ∏è –Ü–ú–¢", callback_data="calculate_bmi")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    profile_image = "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&h=600&fit=crop"
    if user['gender'] == '–∂—ñ–Ω–∫–∞':
        profile_image = "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&h=600&fit=crop"
    else:
        profile_image = "https://images.unsplash.com/photo-1581009146145-b5ef050c2e1e?w=800&h=600&fit=crop"
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=profile_image,
        caption=profile_text,
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "water_intake")
async def water_intake(callback: CallbackQuery):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ—Ä–º–∏ –≤–æ–¥–∏"""
    user_id = str(callback.from_user.id)
    
    if user_id not in users_db:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
            [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.edit_text(
            "üíß –î–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ω–æ—Ä–º–∏ –≤–æ–¥–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø—Ä–æ—Ñ—ñ–ª—å!\n\n"
            "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π:",
            reply_markup=keyboard
        )
        return
    
    user = users_db[user_id]
    water_ml = calculate_water_intake(user['weight'], user['activity'])
    water_glasses = round(water_ml / 250)
    
    water_text = f"""
üíß –í–∞—à–∞ –Ω–æ—Ä–º–∞ –≤–æ–¥–∏:

üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:
‚Ä¢ –í–∞–≥–∞: {user['weight']} –∫–≥
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user['activity']}
‚Ä¢ –ë–∞–∑–æ–≤–∞ –Ω–æ—Ä–º–∞: 35 –º–ª/–∫–≥

üí¶ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
‚Ä¢ {water_ml} –º–ª –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –¶–µ –ø—Ä–∏–±–ª–∏–∑–Ω–æ {water_glasses} —Å–∫–ª—è–Ω–æ–∫ –ø–æ 250–º–ª
‚Ä¢ –ü–∏–π—Ç–µ —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ –ø—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è

üí° –ü–æ—Ä–∞–¥–∏:
‚Ä¢ –ü–æ—á–Ω—ñ—Ç—å –¥–µ–Ω—å –∑—ñ —Å–∫–ª—è–Ω–∫–∏ –≤–æ–¥–∏
‚Ä¢ –ü–∏–π—Ç–µ –≤–æ–¥—É –∑–∞ 30 —Ö–≤ –¥–æ —ó–∂—ñ
‚Ä¢ –ë—ñ–ª—å—à–µ –≤–æ–¥–∏ –ø—Ä–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è—Ö
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öñÔ∏è –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ü–ú–¢", callback_data="calculate_bmi")],
        [InlineKeyboardButton(text="üí° –©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏", callback_data="daily_tips")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    water_image = "https://images.unsplash.com/photo-1550583724-b2692b85b150?w=800&h=600&fit=crop"
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=water_image,
        caption=water_text,
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "calculate_bmi")
async def calculate_bmi_handler(callback: CallbackQuery):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ü–ú–¢"""
    user_id = str(callback.from_user.id)
    
    if user_id not in users_db:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
            [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.edit_text(
            "‚öñÔ∏è –î–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ü–ú–¢ –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø—Ä–æ—Ñ—ñ–ª—å!\n\n"
            "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π:",
            reply_markup=keyboard
        )
        return
    
    user = users_db[user_id]
    bmi = calculate_bmi(user['weight'], user['height'])
    category, emoji = get_bmi_category(bmi)
    
    bmi_text = f"""
‚öñÔ∏è –í–∞—à —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ (–Ü–ú–¢):

üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:
‚Ä¢ –ó—Ä—ñ—Å—Ç: {user['height']} —Å–º
‚Ä¢ –í–∞–≥–∞: {user['weight']} –∫–≥
‚Ä¢ –Ü–ú–¢: {bmi}

{emoji} –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}

üìà –®–∫–∞–ª–∞ –Ü–ú–¢:
üîµ < 18.5 - –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –≤–∞–≥–∞
üü¢ 18.5-24.9 - –Ω–æ—Ä–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞
üü° 25.0-29.9 - –Ω–∞–¥–ª–∏—à–∫–æ–≤–∞ –≤–∞–≥–∞
üî¥ ‚â• 30.0 - –æ–∂–∏—Ä—ñ–Ω–Ω—è
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíß –ù–æ—Ä–º–∞ –≤–æ–¥–∏", callback_data="water_intake")],
        [InlineKeyboardButton(text="üí° –©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏", callback_data="daily_tips")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    bmi_image = "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&h=600&fit=crop"
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=bmi_image,
        caption=bmi_text,
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "daily_tips")
async def daily_tips(callback: CallbackQuery):
    """–©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏"""
    import random
    
    tips = [
        "ü•ó –á–∂—Ç–µ 5 –ø–æ—Ä—Ü—ñ–π –æ–≤–æ—á—ñ–≤ —Ç–∞ —Ñ—Ä—É–∫—Ç—ñ–≤ –Ω–∞ –¥–µ–Ω—å",
        "üö∂ –†–æ–±—ñ—Ç—å –º—ñ–Ω—ñ–º—É–º 10,000 –∫—Ä–æ–∫—ñ–≤ —â–æ–¥–Ω—è",
        "üí§ –°–ø—ñ—Ç—å 7-9 –≥–æ–¥–∏–Ω –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–º—É",
        "ü•õ –ü–∏–π—Ç–µ –≤–æ–¥—É –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è",
        "üçΩÔ∏è –á–∂—Ç–µ –ø–æ–≤—ñ–ª—å–Ω–æ —Ç–∞ —Ä–µ—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∂–æ–≤—É–π—Ç–µ",
        "üßò –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ü—ñ—é 10 —Ö–≤–∏–ª–∏–Ω —â–æ–¥–Ω—è",
        "üèÉ –î–æ–¥–∞–π—Ç–µ –∫–∞—Ä–¥—ñ–æ-—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è 3 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å",
        "üí™ –°–∏–ª–æ–≤—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è 2-3 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å",
        "ü•ú –í–∫–ª—é—á–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—ñ –∂–∏—Ä–∏: –≥–æ—Ä—ñ—Ö–∏, –∞–≤–æ–∫–∞–¥–æ, –æ–ª—ñ—ó"
    ]
    
    daily_tips_list = random.sample(tips, 5)
    tips_text = "\n".join([f"{i+1}. {tip}" for i, tip in enumerate(daily_tips_list)])
    
    tips_full_text = f"""
üí° –©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤'—è:

{tips_text}

üåü –ü–∞–º'—è—Ç–∞–π—Ç–µ: –º–∞–ª–µ–Ω—å–∫—ñ –∫—Ä–æ–∫–∏ –≤–µ–¥—É—Ç—å –¥–æ –≤–µ–ª–∏–∫–∏—Ö –∑–º—ñ–Ω!
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ñ –ø–æ—Ä–∞–¥–∏", callback_data="daily_tips")],
        [InlineKeyboardButton(text="üíß –ù–æ—Ä–º–∞ –≤–æ–¥–∏", callback_data="water_intake")],
        [InlineKeyboardButton(text="‚öñÔ∏è –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ü–ú–¢", callback_data="calculate_bmi")],
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    tips_image = "https://images.unsplash.com/photo-1506629905107-bb5842dcbc67?w=800&h=600&fit=crop"
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=tips_image,
        caption=tips_full_text,
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–æ–≤—ñ–¥–∫–∏"""
    help_text = """
‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É

ü§ñ –©–æ —è –≤–º—ñ—é:
‚Ä¢ üìä –†–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –±–∞–∑–æ–≤–∏–π –º–µ—Ç–∞–±–æ–ª—ñ–∑–º (BMR)
‚Ä¢ üî• –í–∏–∑–Ω–∞—á–∞—Ç–∏ –¥–µ–Ω–Ω—É –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä—ñ–π
‚Ä¢ üçé –†–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
‚Ä¢ üíß –†–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –Ω–æ—Ä–º—É –≤–æ–¥–∏ —â–æ–¥–Ω—è
‚Ä¢ ‚öñÔ∏è –í–∏–∑–Ω–∞—á–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ (–Ü–ú–¢)
‚Ä¢ üí° –î–∞–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤'—è
‚Ä¢ üìà –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å

üìä –§–æ—Ä–º—É–ª–∏:
‚Ä¢ BMR: –•–∞—Ä—Ä—ñ—Å-–ë–µ–Ω–µ–¥–∏–∫—Ç
‚Ä¢ –Ü–ú–¢: –≤–∞–≥–∞(–∫–≥) / –∑—Ä—ñ—Å—Ç(–º)¬≤
‚Ä¢ –í–æ–¥–∞: 35 –º–ª √ó –≤–∞–≥–∞ √ó –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å

üéØ –ú–µ—Ç–∏:
‚Ä¢ –°—Ö—É–¥–Ω—É—Ç–∏: -500 –∫–∫–∞–ª
‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏: –Ω–æ—Ä–º–∞
‚Ä¢ –ù–∞–±—Ä–∞—Ç–∏: +500 –∫–∫–∞–ª

üì± /start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    help_image = "https://images.unsplash.com/photo-1551963831-b3b1ca40c98e?w=800&h=600&fit=crop"
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=help_image,
        caption=help_text,
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="create_profile")],
        [InlineKeyboardButton(text="üçé –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—É", callback_data="calculate_food")],
        [InlineKeyboardButton(text="üìà –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="my_profile")],
        [InlineKeyboardButton(text="üíß –ù–æ—Ä–º–∞ –≤–æ–¥–∏", callback_data="water_intake")],
        [InlineKeyboardButton(text="‚öñÔ∏è –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ü–ú–¢", callback_data="calculate_bmi")],
        [InlineKeyboardButton(text="üí° –©–æ–¥–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏", callback_data="daily_tips")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ])
    
    menu_image = "https://images.unsplash.com/photo-1498837167922-ddd27525d352?w=800&h=600&fit=crop"
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=menu_image,
        caption=f"–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†\n\n"
        "–û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏:",
        reply_markup=keyboard
    )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    load_users()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! üöÄ")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"Error starting bot: {e}")

if __name__ == "__main__":
    asyncio.run(main())